{% comment %}
  Cube Sync Manager - Advanced Product Sync Controls
  Provides granular control over what, when, and how Cube products sync
{% endcomment %}

<div class="cube-sync-manager-section" data-section-id="{{ section.id }}">
  <div class="container">
    <div class="sync-manager-header">
      <h2>{{ section.settings.title | default: 'Cube Sync Manager' }}</h2>
      <p>{{ section.settings.subtitle | default: 'Granular control over product synchronization from Cube Connect API' }}</p>
    </div>

    <!-- Sync Status Overview -->
    <div class="sync-status-panel">
      <div class="status-row">
        <div class="status-item">
          <span class="status-label">Connection Status:</span>
          <span class="status-value" id="cube-connection-status">Checking...</span>
        </div>
        <div class="status-item">
          <span class="status-label">Last Sync:</span>
          <span class="status-value" id="last-sync-time">Never</span>
        </div>
        <div class="status-item">
          <span class="status-label">Products Available:</span>
          <span class="status-value" id="available-products">0</span>
        </div>
        <div class="status-item">
          <span class="status-label">Synced Products:</span>
          <span class="status-value" id="synced-products">0</span>
        </div>
      </div>
    </div>

    <div class="sync-controls-container">
      <!-- Left Panel: Filters & Selection -->
      <div class="selection-panel">
        <h3>Product Selection</h3>
        
        <!-- Category Filters -->
        <div class="filter-group">
          <h4>Categories</h4>
          <div class="category-filters" id="category-filters">
            <!-- Dynamic category filters will be populated here -->
          </div>
        </div>

        <!-- Price Range Filter -->
        <div class="filter-group">
          <h4>Price Range (CHF)</h4>
          <div class="price-range-controls">
            <input type="number" id="price-min" placeholder="Min" min="0" step="100" value="500">
            <span>to</span>
            <input type="number" id="price-max" placeholder="Max" min="0" step="100" value="8000">
          </div>
        </div>

        <!-- Availability Filter -->
        <div class="filter-group">
          <h4>Availability</h4>
          <div class="availability-filters">
            <label class="filter-radio">
              <input type="radio" name="availability" value="all" checked>
              <span>All Products</span>
            </label>
            <label class="filter-radio">
              <input type="radio" name="availability" value="in-stock">
              <span>In Stock Only</span>
            </label>
            <label class="filter-radio">
              <input type="radio" name="availability" value="out-of-stock">
              <span>Out of Stock Only</span>
            </label>
          </div>
        </div>

        <!-- New Products Filter -->
        <div class="filter-group">
          <h4>Product Status</h4>
          <div class="status-filters">
            <label class="filter-checkbox">
              <input type="checkbox" value="new-products" checked>
              <span>New Products (not in Shopify)</span>
            </label>
            <label class="filter-checkbox">
              <input type="checkbox" value="updated-products">
              <span>Products with Updates</span>
            </label>
            <label class="filter-checkbox">
              <input type="checkbox" value="existing-products">
              <span>Existing Products</span>
            </label>
          </div>
        </div>

        <button class="btn-apply-filters" onclick="applyProductFilters()">
          <i class="fa fa-filter"></i> Apply Filters
        </button>
      </div>

      <!-- Right Panel: Sync Controls & Preview -->
      <div class="sync-panel">
        <!-- Sync Options -->
        <div class="sync-options">
          <h3>Sync Configuration</h3>
          
          <!-- What to Sync -->
          <div class="sync-group">
            <h4>Fields to Update</h4>
            <div class="field-options">
              <label class="option-checkbox">
                <input type="checkbox" value="basic-info" checked>
                <span>Basic Info (Name, Description)</span>
              </label>
              <label class="option-checkbox">
                <input type="checkbox" value="pricing" checked>
                <span>Pricing</span>
              </label>
              <label class="option-checkbox">
                <input type="checkbox" value="inventory" checked>
                <span>Inventory Levels</span>
              </label>
              <label class="option-checkbox">
                <input type="checkbox" value="images">
                <span>Product Images</span>
              </label>
              <label class="option-checkbox">
                <input type="checkbox" value="specifications">
                <span>Technical Specifications</span>
              </label>
              <label class="option-checkbox">
                <input type="checkbox" value="categories">
                <span>Categories & Tags</span>
              </label>
            </div>
          </div>

          <!-- Conflict Resolution -->
          <div class="sync-group">
            <h4>Conflict Resolution</h4>
            <div class="conflict-options">
              <label class="conflict-radio">
                <input type="radio" name="conflict-resolution" value="cube-wins" checked>
                <span>Cube Overrides Shopify</span>
                <small>Always use Cube data</small>
              </label>
              <label class="conflict-radio">
                <input type="radio" name="conflict-resolution" value="shopify-wins">
                <span>Keep Shopify Changes</span>
                <small>Skip products modified in Shopify</small>
              </label>
              <label class="conflict-radio">
                <input type="radio" name="conflict-resolution" value="ask-me">
                <span>Ask for Each Conflict</span>
                <small>Review conflicts manually</small>
              </label>
            </div>
          </div>

          <!-- Sync Mode -->
          <div class="sync-group">
            <h4>Sync Mode</h4>
            <div class="mode-options">
              <label class="mode-radio">
                <input type="radio" name="sync-mode" value="preview" checked>
                <span>Preview First</span>
                <small>Show changes before applying</small>
              </label>
              <label class="mode-radio">
                <input type="radio" name="sync-mode" value="immediate">
                <span>Sync Immediately</span>
                <small>Apply changes directly</small>
              </label>
            </div>
          </div>
        </div>

        <!-- Preview Panel -->
        <div class="sync-preview" id="sync-preview" style="display: none;">
          <h3>Sync Preview</h3>
          <div class="preview-summary">
            <div class="summary-item">
              <span class="summary-label">New Products:</span>
              <span class="summary-value" id="preview-new">0</span>
            </div>
            <div class="summary-item">
              <span class="summary-label">Updates:</span>
              <span class="summary-value" id="preview-updates">0</span>
            </div>
            <div class="summary-item">
              <span class="summary-label">Conflicts:</span>
              <span class="summary-value" id="preview-conflicts">0</span>
            </div>
          </div>
          
          <div class="preview-list" id="preview-list">
            <!-- Preview items will be populated here -->
          </div>
          
          <div class="preview-details" id="preview-details">
            <div class="detail-tabs">
              <button class="detail-tab active" data-tab="new-products">New Products</button>
              <button class="detail-tab" data-tab="updates">Updates</button>
              <button class="detail-tab" data-tab="conflicts">Conflicts</button>
            </div>
            
            <div class="tab-content">
              <div class="tab-pane active" id="new-products-tab">
                <div class="products-list" id="new-products-list"></div>
              </div>
              <div class="tab-pane" id="updates-tab">
                <div class="products-list" id="updates-list"></div>
              </div>
              <div class="tab-pane" id="conflicts-tab">
                <div class="products-list" id="conflicts-list"></div>
              </div>
            </div>
          </div>
          
          <div class="preview-actions">
            <button class="btn-cancel" onclick="cancelPreview()">Cancel</button>
            <button class="btn-approve" onclick="approveSync()">
              <i class="fa fa-check"></i> Approve Sync
            </button>
          </div>
        </div>

        <!-- Sync Actions -->
        <div class="sync-actions">
          <button class="btn-preview-sync" onclick="previewSync()">
            <i class="fa fa-eye"></i> Preview Sync
          </button>
          <button class="btn-manual-sync" onclick="manualSync()">
            <i class="fa fa-sync"></i> Sync Now
          </button>
        </div>
      </div>
    </div>

    <!-- Scheduling Panel -->
    <div class="scheduling-panel">
      <h3>Sync Scheduling</h3>
      
      <div class="schedule-options">
        <div class="schedule-group">
          <h4>Automatic Sync</h4>
          <label class="schedule-radio">
            <input type="radio" name="schedule" value="disabled" checked>
            <span>Manual Only</span>
          </label>
          <label class="schedule-radio">
            <input type="radio" name="schedule" value="hourly">
            <span>Every Hour (Inventory Only)</span>
          </label>
          <label class="schedule-radio">
            <input type="radio" name="schedule" value="daily">
            <span>Daily at 3:00 AM</span>
          </label>
          <label class="schedule-radio">
            <input type="radio" name="schedule" value="weekly">
            <span>Weekly on Sunday</span>
          </label>
          <label class="schedule-radio">
            <input type="radio" name="schedule" value="custom">
            <span>Custom Schedule</span>
          </label>
        </div>

        <div class="custom-schedule" id="custom-schedule" style="display: none;">
          <div class="schedule-time">
            <label>Time:</label>
            <select id="schedule-hour">
              <option value="03">3:00 AM</option>
              <option value="06">6:00 AM</option>
              <option value="12">12:00 PM</option>
              <option value="18">6:00 PM</option>
              <option value="21">9:00 PM</option>
            </select>
          </div>
          <div class="schedule-days">
            <label>Days:</label>
            <div class="day-checkboxes">
              <label><input type="checkbox" value="1">Mon</label>
              <label><input type="checkbox" value="2">Tue</label>
              <label><input type="checkbox" value="3">Wed</label>
              <label><input type="checkbox" value="4">Thu</label>
              <label><input type="checkbox" value="5">Fri</label>
              <label><input type="checkbox" value="6">Sat</label>
              <label><input type="checkbox" value="0">Sun</label>
            </div>
          </div>
        </div>

        <button class="btn-save-schedule" onclick="saveSchedule()">
          <i class="fa fa-clock"></i> Save Schedule
        </button>
      </div>
    </div>

    <!-- Recent Sync History -->
    <div class="sync-history">
      <h3>Recent Sync History</h3>
      <div class="history-list" id="sync-history-list">
        <div class="history-item">
          <div class="history-time">2025-01-15 10:30 AM</div>
          <div class="history-action">Manual Sync</div>
          <div class="history-result">✅ 12 products synced, 2 conflicts resolved</div>
        </div>
        <div class="history-item">
          <div class="history-time">2025-01-14 3:00 AM</div>
          <div class="history-action">Scheduled Sync</div>
          <div class="history-result">✅ 5 inventory updates</div>
        </div>
        <div class="history-item">
          <div class="history-time">2025-01-13 2:15 PM</div>
          <div class="history-action">Manual Sync</div>
          <div class="history-result">❌ Failed - API timeout</div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .cube-sync-manager-section {
    padding: 40px 0;
    background: #f8f9fa;
  }

  .sync-manager-header {
    text-align: center;
    margin-bottom: 40px;
  }

  .sync-manager-header h2 {
    font-size: 32px;
    color: #333;
    margin-bottom: 10px;
  }

  .sync-status-panel {
    background: white;
    padding: 20px;
    border-radius: 12px;
    margin-bottom: 30px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }

  .status-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
  }

  .status-item {
    display: flex;
    flex-direction: column;
    text-align: center;
  }

  .status-label {
    font-size: 12px;
    color: #6c757d;
    font-weight: 500;
  }

  .status-value {
    font-size: 18px;
    font-weight: 600;
    color: #333;
    margin-top: 5px;
  }

  .sync-controls-container {
    display: grid;
    grid-template-columns: 350px 1fr;
    gap: 30px;
    margin-bottom: 30px;
  }

  .selection-panel, .sync-panel {
    background: white;
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }

  .selection-panel h3, .sync-panel h3 {
    margin: 0 0 20px 0;
    font-size: 20px;
    color: #333;
  }

  .filter-group, .sync-group {
    margin-bottom: 25px;
    padding-bottom: 20px;
    border-bottom: 1px solid #e9ecef;
  }

  .filter-group:last-child, .sync-group:last-child {
    border-bottom: none;
  }

  .filter-group h4, .sync-group h4 {
    margin: 0 0 15px 0;
    font-size: 14px;
    color: #333;
    font-weight: 600;
  }

  .filter-checkbox, .option-checkbox {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 8px 0;
    cursor: pointer;
  }

  .filter-checkbox input, .option-checkbox input {
    margin-right: 10px;
  }

  .product-count {
    font-size: 12px;
    color: #6c757d;
  }

  .price-range-controls {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .price-range-controls input {
    flex: 1;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 14px;
  }

  .filter-radio, .conflict-radio, .mode-radio, .schedule-radio {
    display: block;
    padding: 8px 0;
    cursor: pointer;
  }

  .filter-radio input, .conflict-radio input, .mode-radio input, .schedule-radio input {
    margin-right: 10px;
  }

  .conflict-radio small, .mode-radio small {
    display: block;
    color: #6c757d;
    font-size: 11px;
    margin-left: 25px;
  }

  .btn-apply-filters, .btn-preview-sync, .btn-manual-sync, .btn-save-schedule {
    width: 100%;
    padding: 12px 20px;
    background: #333;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    margin-bottom: 10px;
  }

  .btn-apply-filters:hover, .btn-preview-sync:hover, .btn-manual-sync:hover, .btn-save-schedule:hover {
    background: #555;
    transform: translateY(-1px);
  }

  .sync-preview {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    margin: 20px 0;
  }

  .preview-summary {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 15px;
    margin-bottom: 20px;
  }

  .summary-item {
    text-align: center;
    padding: 10px;
    background: white;
    border-radius: 6px;
  }

  .summary-label {
    display: block;
    font-size: 12px;
    color: #6c757d;
  }

  .summary-value {
    font-size: 24px;
    font-weight: 600;
    color: #333;
  }

  .preview-details {
    margin-top: 20px;
  }

  .detail-tabs {
    display: flex;
    border-bottom: 2px solid #e9ecef;
    margin-bottom: 20px;
  }

  .detail-tab {
    padding: 10px 20px;
    background: none;
    border: none;
    border-bottom: 2px solid transparent;
    cursor: pointer;
    font-weight: 500;
    color: #6c757d;
    transition: all 0.3s ease;
  }

  .detail-tab.active {
    color: #333;
    border-bottom-color: #333;
  }

  .detail-tab:hover {
    color: #333;
  }

  .tab-pane {
    display: none;
  }

  .tab-pane.active {
    display: block;
  }

  .products-list {
    display: grid;
    gap: 15px;
    max-height: 400px;
    overflow-y: auto;
  }

  /* Product Comparison Cards */
  .product-comparison-card {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    margin-bottom: 20px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    border: 1px solid #e9ecef;
    transition: all 0.3s ease;
  }

  .product-comparison-card:hover {
    box-shadow: 0 4px 12px rgba(0,0,0,0.12);
  }

  .product-comparison-card.new {
    border-left: 4px solid #28a745;
  }

  .product-comparison-card.update {
    border-left: 4px solid #17a2b8;
  }

  .product-comparison-card.conflict {
    border-left: 4px solid #ffc107;
  }

  .comparison-header {
    padding: 15px 20px;
    background: #f8f9fa;
    border-bottom: 1px solid #e9ecef;
    display: flex;
    align-items: center;
    gap: 15px;
  }

  .product-title {
    font-weight: 600;
    color: #333;
    font-size: 16px;
    margin: 0;
    flex: 1;
  }

  .product-sku {
    font-size: 12px;
    color: #6c757d;
    font-family: 'Courier New', monospace;
    background: #f8f9fa;
    padding: 2px 8px;
    border-radius: 4px;
  }

  .badge {
    padding: 4px 12px;
    border-radius: 20px;
    font-size: 11px;
    font-weight: 600;
    text-transform: uppercase;
  }

  .badge-new {
    background: #d4edda;
    color: #155724;
  }

  .badge-update {
    background: #d1ecf1;
    color: #0c5460;
  }

  .badge-conflict {
    background: #fff3cd;
    color: #856404;
  }

  .comparison-grid {
    display: grid;
    grid-template-columns: 1fr auto 1fr;
    gap: 20px;
    padding: 20px;
    align-items: start;
  }

  .comparison-grid.single {
    grid-template-columns: 1fr;
  }

  .comparison-column {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 15px;
  }

  .comparison-column h5 {
    margin: 0 0 15px 0;
    font-size: 14px;
    color: #333;
    font-weight: 600;
    padding-bottom: 10px;
    border-bottom: 2px solid #dee2e6;
  }

  .comparison-column.before-data {
    background: #fff5f5;
  }

  .comparison-column.after-data {
    background: #f0f9ff;
  }

  .comparison-column.cube-data {
    background: #f0fff4;
  }

  .comparison-arrow {
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    color: #6c757d;
    padding-top: 30px;
  }

  .comparison-arrow.conflict {
    color: #ffc107;
    font-size: 32px;
  }

  .data-rows {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .data-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 6px 0;
    font-size: 13px;
    border-bottom: 1px solid #e9ecef;
  }

  .data-row:last-child {
    border-bottom: none;
  }

  .data-row.changed {
    background: rgba(255, 193, 7, 0.1);
    padding: 6px 8px;
    margin: 0 -8px;
    border-radius: 4px;
  }

  .data-row.conflict {
    background: rgba(220, 53, 69, 0.1);
    padding: 6px 8px;
    margin: 0 -8px;
    border-radius: 4px;
  }

  .data-row .label {
    color: #6c757d;
    font-weight: 500;
  }

  .data-row .value {
    font-weight: 600;
    color: #333;
    text-align: right;
  }

  .data-row .value.increase {
    color: #28a745;
  }

  .data-row .value.increase::before {
    content: '↑ ';
  }

  .data-row .value.decrease {
    color: #dc3545;
  }

  .data-row .value.decrease::before {
    content: '↓ ';
  }

  .conflict-reason {
    background: #fff3cd;
    color: #856404;
    padding: 12px 20px;
    font-size: 13px;
    border-bottom: 1px solid #ffeaa7;
  }

  .description-row {
    flex-direction: column;
    align-items: stretch;
  }

  .description-text {
    font-size: 12px;
    line-height: 1.4;
    margin-top: 5px;
    padding: 8px;
    background: rgba(255, 255, 255, 0.5);
    border-radius: 4px;
    border: 1px solid #e9ecef;
  }

  .conflict-resolution {
    background: #fff3cd;
    border: 1px solid #ffeaa7;
    border-radius: 6px;
    padding: 10px;
    margin-top: 10px;
  }

  .conflict-options {
    display: flex;
    gap: 10px;
    margin-top: 8px;
  }

  .conflict-btn {
    padding: 4px 12px;
    font-size: 11px;
    border: 1px solid #ddd;
    background: white;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .conflict-btn:hover {
    background: #f8f9fa;
  }

  .conflict-btn.selected {
    background: #333;
    color: white;
    border-color: #333;
  }

  .preview-actions {
    display: flex;
    gap: 10px;
    margin-top: 20px;
  }

  .btn-cancel {
    flex: 1;
    padding: 10px;
    background: #6c757d;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
  }

  .btn-approve {
    flex: 2;
    padding: 10px;
    background: #28a745;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
  }

  .scheduling-panel, .sync-history {
    background: white;
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    margin-bottom: 30px;
  }

  .scheduling-panel h3, .sync-history h3 {
    margin: 0 0 20px 0;
    font-size: 20px;
    color: #333;
  }

  .schedule-options {
    display: grid;
    grid-template-columns: 1fr auto;
    gap: 30px;
    align-items: start;
  }

  .custom-schedule {
    background: #f8f9fa;
    padding: 15px;
    border-radius: 8px;
    margin-top: 15px;
  }

  .schedule-time, .schedule-days {
    margin-bottom: 15px;
  }

  .schedule-time select {
    margin-left: 10px;
    padding: 5px 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
  }

  .day-checkboxes {
    display: flex;
    gap: 10px;
    margin-left: 10px;
  }

  .day-checkboxes label {
    display: flex;
    align-items: center;
    gap: 5px;
    font-size: 12px;
  }

  .history-list {
    max-height: 300px;
    overflow-y: auto;
  }

  .history-item {
    display: grid;
    grid-template-columns: auto auto 1fr;
    gap: 20px;
    padding: 15px;
    border-bottom: 1px solid #e9ecef;
    align-items: center;
  }

  .history-time {
    font-size: 12px;
    color: #6c757d;
    white-space: nowrap;
  }

  .history-action {
    font-size: 14px;
    font-weight: 500;
    color: #333;
  }

  .history-result {
    font-size: 12px;
    color: #6c757d;
  }

  @media (max-width: 1200px) {
    .sync-controls-container {
      grid-template-columns: 1fr;
      gap: 20px;
    }
    
    .selection-panel {
      order: 2;
    }
    
    .sync-panel {
      order: 1;
    }
    
    .comparison-grid {
      grid-template-columns: 1fr;
      gap: 10px;
    }
    
    .comparison-arrow {
      display: none;
    }
    
    .comparison-column h5 {
      background: #333;
      color: white;
      padding: 8px 10px;
      margin: -15px -15px 15px -15px;
      border-radius: 8px 8px 0 0;
      border: none;
    }
  }

  @media (max-width: 768px) {
    .status-row {
      grid-template-columns: repeat(2, 1fr);
    }
    
    .preview-summary {
      grid-template-columns: 1fr;
    }
    
    .schedule-options {
      grid-template-columns: 1fr;
    }
    
    .history-item {
      grid-template-columns: 1fr;
      gap: 5px;
    }
    
    .comparison-header {
      flex-wrap: wrap;
    }
    
    .product-title {
      width: 100%;
      margin-bottom: 8px;
    }
    
    .conflict-options {
      flex-direction: column;
    }
    
    .conflict-btn {
      width: 100%;
    }
  }
</style>

<script src="{{ 'cube-api-client.js' | asset_url }}"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Initialize sync manager
  initializeSyncManager();
  
  // Setup event listeners
  setupEventListeners();
  
  // Load initial data
  loadSyncStatus();
});

function initializeSyncManager() {
  console.log('🔄 Cube Sync Manager initialized');
  
  // Initialize Cube API client
  if (window.CubeAPI) {
    window.CubeAPI.initialize().then(success => {
      updateConnectionStatus(success ? 'Connected' : 'Not Connected');
    });
  }
}

function setupEventListeners() {
  // Schedule radio buttons
  const scheduleRadios = document.querySelectorAll('input[name="schedule"]');
  scheduleRadios.forEach(radio => {
    radio.addEventListener('change', function() {
      const customSchedule = document.getElementById('custom-schedule');
      customSchedule.style.display = this.value === 'custom' ? 'block' : 'none';
    });
  });
}

function loadSyncStatus() {
  // Update connection status
  updateConnectionStatus('Checking...');
  
  // Load actual product data and populate filters
  loadProductData();
  
  // Load sync history from localStorage
  const history = JSON.parse(localStorage.getItem('cube_sync_history') || '[]');
  updateSyncHistory(history);
  
  // Check last sync time
  const lastSync = localStorage.getItem('cube_last_sync');
  if (lastSync) {
    document.getElementById('last-sync-time').textContent = new Date(parseInt(lastSync)).toLocaleString();
  }
}

// Store actual product data globally
window.cubeProductData = null;

function loadProductData() {
  // Simulate loading product data from Cube API
  // In real implementation, this would call window.CubeAPI.getProducts()
  
  const mockProductData = {
    categories: {
      'e-mountain': { name: 'E-Mountain Bikes', count: 42, checked: true },
      'e-road': { name: 'E-Road Bikes', count: 28, checked: true },
      'e-touring': { name: 'E-Touring Bikes', count: 19, checked: false },
      'e-urban': { name: 'E-Urban Bikes', count: 33, checked: false },
      'mountain': { name: 'Mountain Bikes', count: 24, checked: false },
      'road': { name: 'Road Bikes', count: 18, checked: false },
      'accessories': { name: 'Accessories', count: 14, checked: true }
    },
    totalProducts: 178,
    syncedProducts: 84
  };
  
  window.cubeProductData = mockProductData;
  
  // Update UI with real counts
  document.getElementById('available-products').textContent = mockProductData.totalProducts;
  document.getElementById('synced-products').textContent = mockProductData.syncedProducts;
  
  // Populate category filters
  populateCategoryFilters(mockProductData.categories);
}

function populateCategoryFilters(categories) {
  const container = document.getElementById('category-filters');
  
  container.innerHTML = Object.entries(categories).map(([key, category]) => `
    <label class="filter-checkbox">
      <input type="checkbox" value="${key}" ${category.checked ? 'checked' : ''}>
      <span>${category.name}</span>
      <span class="product-count">(${category.count})</span>
    </label>
  `).join('');
}

function updateConnectionStatus(status) {
  const statusElement = document.getElementById('cube-connection-status');
  statusElement.textContent = status;
  
  // Update styling based on status
  statusElement.style.color = status === 'Connected' ? '#28a745' : 
                               status === 'Not Connected' ? '#dc3545' : '#6c757d';
}

function applyProductFilters() {
  const categories = Array.from(document.querySelectorAll('.category-filters input:checked')).map(cb => cb.value);
  const priceMin = document.getElementById('price-min').value;
  const priceMax = document.getElementById('price-max').value;
  const availability = document.querySelector('input[name="availability"]:checked').value;
  const statuses = Array.from(document.querySelectorAll('.status-filters input:checked')).map(cb => cb.value);
  
  console.log('Applying filters:', { categories, priceMin, priceMax, availability, statuses });
  
  // Calculate filtered product count based on selected categories
  if (window.cubeProductData) {
    let filteredCount = 0;
    categories.forEach(categoryKey => {
      if (window.cubeProductData.categories[categoryKey]) {
        filteredCount += window.cubeProductData.categories[categoryKey].count;
      }
    });
    
    // Apply additional filters (price, availability, status) - simulate reduction
    if (priceMin || priceMax) {
      filteredCount = Math.floor(filteredCount * 0.8); // Simulate price filtering
    }
    if (availability !== 'all') {
      filteredCount = Math.floor(filteredCount * 0.7); // Simulate availability filtering
    }
    
    document.getElementById('available-products').textContent = filteredCount;
    showNotification(`Filters applied - ${filteredCount} products found`, 'success');
  }
}

function previewSync() {
  showNotification('Generating sync preview...', 'info');
  
  const syncMode = document.querySelector('input[name="sync-mode"]:checked').value;
  const fieldsToSync = Array.from(document.querySelectorAll('.field-options input:checked')).map(cb => cb.value);
  const conflictResolution = document.querySelector('input[name="conflict-resolution"]:checked').value;
  
  console.log('Preview with fields to sync:', fieldsToSync);
  
  // Store fields to sync globally for use in preview generation
  window.fieldsToSync = fieldsToSync;
  
  // Simulate preview generation
  setTimeout(() => {
    const preview = {
      newProducts: Math.floor(Math.random() * 8) + 3,
      updates: Math.floor(Math.random() * 12) + 5,
      conflicts: Math.floor(Math.random() * 3),
      fieldsToSync: fieldsToSync
    };
    
    showSyncPreview(preview);
  }, 2000);
}

function showSyncPreview(preview) {
  const previewPanel = document.getElementById('sync-preview');
  
  // Update preview summary
  document.getElementById('preview-new').textContent = preview.newProducts;
  document.getElementById('preview-updates').textContent = preview.updates;
  document.getElementById('preview-conflicts').textContent = preview.conflicts;
  
  // Generate detailed product data
  const detailedData = generateDetailedPreviewData(preview);
  
  // Populate detailed tabs
  populateProductsList('new-products-list', detailedData.newProducts, 'new');
  populateProductsList('updates-list', detailedData.updates, 'update');
  populateProductsList('conflicts-list', detailedData.conflicts, 'conflict');
  
  // Setup tab switching
  setupPreviewTabs();
  
  // Show preview panel
  previewPanel.style.display = 'block';
  previewPanel.scrollIntoView({ behavior: 'smooth' });
  
  showNotification('Preview ready - Review changes before syncing', 'success');
}

function generateDetailedPreviewData(preview) {
  // Generate realistic product data with detailed field-by-field changes
  const fieldsToSync = window.fieldsToSync || ['basic-info', 'pricing', 'inventory'];
  const newProducts = [];
  const updateProducts = [];
  const conflictProducts = [];
  
  // New products - only have Cube data (after)
  for (let i = 0; i < Math.min(preview.newProducts, 10); i++) {
    newProducts.push({
      id: `new-${i}`,
      type: 'new',
      sku: `CB-NEW-${String(i).padStart(3, '0')}-2025`,
      shopify: null, // No Shopify data for new products
      cube: {
        name: ['Stereo Hybrid ONE 500 29"', 'Agree Hybrid C:62 Race 625', 'Touring Hybrid Pro EXC', 'Reaction Hybrid Race 625'][i % 4],
        price: 2999 + (i * 500),
        stock: Math.floor(Math.random() * 20) + 1,
        category: ['E-Mountain Bike', 'E-Road Bike', 'E-Touring Bike', 'E-Urban Bike'][i % 4],
        description: `Latest 2025 model featuring cutting-edge ${['Bosch Performance CX Gen 4', 'Shimano EP8', 'Bosch Active Line Plus', 'Brose Drive TF'][i % 4]} motor technology. Enhanced battery capacity and improved frame geometry for superior performance and comfort. Includes premium components and extended 3-year warranty coverage.`,
        images: Math.floor(Math.random() * 4) + 3,
        weight: (18 + Math.random() * 5).toFixed(1) + ' kg',
        battery: ['625Wh Bosch PowerTube', '500Wh Integrated', '750Wh Bosch PowerPack'][i % 3],
        motor: ['Bosch Performance CX Gen 4', 'Shimano EP8', 'Bosch Active Line Plus'][i % 3],
        frameSize: ['M (17")', 'L (19")', 'XL (21")', 'S (15")'][i % 4],
        wheelSize: ['29"', '27.5"', '28"'][i % 3],
        brakes: 'Shimano XT Hydraulic Disc',
        gears: `${8 + (i % 4) * 2}-Speed Shimano`,
        suspension: i % 2 ? 'Front Suspension Fork 120mm' : 'Rigid Carbon Fork',
        color: ['Stealth Black', 'Alpine White', 'Electric Blue', 'Forest Green'][i % 4]
      }
    });
  }
  
  // Updated products - have both Shopify (before) and Cube (after) data
  for (let i = 0; i < Math.min(preview.updates, 10); i++) {
    const basePrice = 3499 + (i * 300);
    const baseStock = Math.floor(Math.random() * 15) + 5;
    updateProducts.push({
      id: `update-${i}`,
      type: 'update',
      sku: `CB-UPD-${String(i).padStart(3, '0')}-2024`,
      fieldsToUpdate: fieldsToSync,
      shopify: {
        name: ['Reaction Hybrid Pro 625', 'Kathmandu Hybrid EXC 500', 'Nuride Hybrid Performance', 'Town Sport Hybrid Pro'][i % 4],
        price: basePrice,
        stock: baseStock,
        category: 'E-Bike',
        description: `2024 model electric bicycle with reliable performance. Features standard components and proven technology for daily commuting and recreational rides.`,
        images: 2,
        weight: (22 + Math.random() * 2).toFixed(1) + ' kg',
        battery: '500Wh Standard',
        motor: 'Bosch Active Line',
        frameSize: ['M (17")', 'L (19")'][i % 2],
        wheelSize: '28"',
        brakes: 'Tektro HD-R280 Hydraulic',
        gears: '8-Speed Shimano Altus',
        suspension: 'Suntour NEX Front Fork',
        color: ['Black', 'White'][i % 2]
      },
      cube: {
        name: ['Reaction Hybrid Pro 625 29"', 'Kathmandu Hybrid EXC 750 Plus', 'Nuride Hybrid Performance Allroad', 'Town Sport Hybrid Pro EXC'][i % 4],
        price: basePrice + (Math.random() > 0.5 ? 200 : -150),
        stock: baseStock + Math.floor(Math.random() * 10) - 5,
        category: ['E-Mountain Bike', 'E-Trekking Bike', 'E-Cross Bike', 'E-Urban Bike'][i % 4],
        description: `Updated 2025 model with enhanced battery life and premium components. Improved frame geometry, upgraded motor technology, and advanced safety features. Professional-grade specifications for demanding riders.`,
        images: 5,
        weight: (20 + Math.random() * 3).toFixed(1) + ' kg',
        battery: '625Wh Bosch PowerTube',
        motor: 'Bosch Performance Line Gen 4',
        frameSize: ['S (15")', 'M (17")', 'L (19")', 'XL (21")'][i % 4],
        wheelSize: ['29"', '27.5"'][i % 2],
        brakes: 'Shimano XT Hydraulic Disc',
        gears: `${10 + (i % 2) * 2}-Speed Shimano Deore`,
        suspension: 'RockShox Judy Silver 100mm',
        color: ['Stealth Black', 'Alpine White', 'Electric Blue'][i % 3]
      }
    });
  }
  
  // Conflict products - significant differences between Shopify and Cube
  for (let i = 0; i < Math.min(preview.conflicts, 3); i++) {
    conflictProducts.push({
      id: `conflict-${i}`,
      type: 'conflict',
      sku: `CB-CNF-${String(i).padStart(3, '0')}-SPECIAL`,
      fieldsToUpdate: fieldsToSync,
      shopify: {
        name: ['Limited Edition Stereo Hybrid 160', 'Custom Agree Hybrid C:62 SLT', 'Special Touring Hybrid ONE'][i],
        price: 4999 + (i * 500),
        stock: 10 + i * 5,
        category: 'Special Edition E-Bike',
        description: `Customized model with special features including premium paint finish, upgraded components, and exclusive accessories. Hand-assembled by master technicians with individual quality certification.`,
        images: 6,
        weight: '19.2 kg',
        battery: '750Wh Bosch PowerTube',
        motor: 'Bosch Performance CX Gen 4',
        frameSize: 'L (19")',
        wheelSize: '29"',
        brakes: 'SRAM Code RS Hydraulic',
        gears: '12-Speed SRAM Eagle',
        suspension: 'Fox 36 Float 160mm',
        color: 'Custom Midnight Blue',
        lastModified: '2025-01-10',
        modifiedBy: 'Store Manager'
      },
      cube: {
        name: ['Stereo Hybrid 160 HPC Race', 'Agree Hybrid C:62 SLT Team', 'Touring Hybrid EXC Pro'][i],
        price: 3999 + (i * 400),
        stock: 0, // Out of stock in Cube
        category: 'E-Mountain Bike',
        description: `Standard model configuration with factory specifications. Proven reliability and performance for professional and recreational use. Standard warranty and support included.`,
        images: 4,
        weight: '21.8 kg',
        battery: '625Wh Bosch PowerPack',
        motor: 'Bosch Performance CX',
        frameSize: ['M (17")', 'L (19")'][i % 2],
        wheelSize: '29"',
        brakes: 'Shimano XT Hydraulic',
        gears: '11-Speed Shimano XT',
        suspension: 'RockShox Pike Select 160mm',
        color: ['Stealth Black', 'Team White'][i % 2],
        lastModified: '2025-01-15',
        modifiedBy: 'Cube API Sync'
      },
      conflictReason: [
        'Price manually increased in Shopify (+1000 CHF vs Cube pricing)',
        'Product out of stock in Cube but showing as available in Shopify',
        'Custom specifications and premium upgrades applied in Shopify'
      ][i]
    });
  }

  return {
    newProducts,
    updates: updateProducts,
    conflicts: conflictProducts
  };
}

function populateProductsList(containerId, products, type) {
  const container = document.getElementById(containerId);
  
  if (products.length === 0) {
    container.innerHTML = '<div class="no-products">No products in this category</div>';
    return;
  }
  
  container.innerHTML = products.map(product => {
    const fieldsToSync = window.fieldsToSync || ['basic-info', 'pricing', 'inventory'];
    
    if (type === 'new') {
      // New products only show Cube data (what will be added)
      return `
        <div class="product-comparison-card new">
          <div class="comparison-header">
            <h4 class="product-title">${product.cube.name}</h4>
            <span class="product-sku">${product.sku}</span>
            <span class="badge badge-new">NEW PRODUCT</span>
          </div>
          
          <div class="comparison-grid single">
            <div class="comparison-column cube-data">
              <h5>Will be added to Shopify:</h5>
              <div class="data-rows">
                ${generateNewProductFields(product.cube, fieldsToSync)}
              </div>
            </div>
          </div>
        </div>
      `;
    } else if (type === 'update') {
      // Update products show before/after comparison
      const comparison = generateComparisonFields(product.shopify, product.cube, fieldsToSync);
      
      return `
        <div class="product-comparison-card update">
          <div class="comparison-header">
            <h4 class="product-title">${product.shopify.name} ${product.shopify.name !== product.cube.name ? `→ ${product.cube.name}` : ''}</h4>
            <span class="product-sku">${product.sku}</span>
            <span class="badge badge-update">UPDATE</span>
          </div>
          
          <div class="comparison-grid">
            <div class="comparison-column before-data">
              <h5>Current (Shopify)</h5>
              <div class="data-rows">
                ${comparison.before}
              </div>
            </div>
            
            <div class="comparison-arrow">→</div>
            
            <div class="comparison-column after-data">
              <h5>After Update (Cube)</h5>
              <div class="data-rows">
                ${comparison.after}
              </div>
            </div>
          </div>
        </div>
      `;
    } else if (type === 'conflict') {
      // Conflict products show both with warning  
      const comparison = generateComparisonFields(product.shopify, product.cube, fieldsToSync);
      
      return `
        <div class="product-comparison-card conflict">
          <div class="comparison-header">
            <h4 class="product-title">${product.shopify.name}</h4>
            <span class="product-sku">${product.sku}</span>
            <span class="badge badge-conflict">CONFLICT</span>
          </div>
          
          <div class="conflict-reason">
            <strong>⚠️ Conflict Reason:</strong> ${product.conflictReason}
          </div>
          
          <div class="comparison-grid">
            <div class="comparison-column before-data">
              <h5>Shopify (Modified ${product.shopify.lastModified})</h5>
              <div class="data-rows">
                ${comparison.before.replace(/changed/g, 'conflict')}
                <div class="data-row">
                  <span class="label">Modified by:</span>
                  <span class="value">${product.shopify.modifiedBy}</span>
                </div>
              </div>
            </div>
            
            <div class="comparison-arrow conflict">⚠️</div>
            
            <div class="comparison-column after-data">
              <h5>Cube (Updated ${product.cube.lastModified})</h5>
              <div class="data-rows">
                ${comparison.after.replace(/changed/g, 'conflict')}
                <div class="data-row">
                  <span class="label">Source:</span>
                  <span class="value">${product.cube.modifiedBy}</span>
                </div>
              </div>
            </div>
          </div>
          
          <div class="conflict-resolution">
            <strong>Choose Resolution:</strong>
            <div class="conflict-options">
              <button class="conflict-btn" onclick="resolveConflict('${product.id}', 'cube')">
                <i class="fa fa-cube"></i> Use Cube Data
              </button>
              <button class="conflict-btn" onclick="resolveConflict('${product.id}', 'shopify')">
                <i class="fa fa-shopping-cart"></i> Keep Shopify
              </button>
              <button class="conflict-btn" onclick="resolveConflict('${product.id}', 'skip')">
                <i class="fa fa-forward"></i> Skip Product
              </button>
            </div>
          </div>
        </div>
      `;
    }
  }).join('');
}

// Field-specific helper functions
function generateNewProductFields(cube, fieldsToSync) {
  let fields = [];
  
  if (fieldsToSync.includes('basic-info')) {
    fields.push(`
      <div class="data-row">
        <span class="label">Name:</span>
        <span class="value">${cube.name}</span>
      </div>
      <div class="data-row">
        <span class="label">Category:</span>
        <span class="value">${cube.category}</span>
      </div>
      <div class="data-row description-row">
        <span class="label">Description:</span>
        <div class="value description-text">${cube.description}</div>
      </div>
    `);
  }
  
  if (fieldsToSync.includes('pricing')) {
    fields.push(`
      <div class="data-row">
        <span class="label">Price:</span>
        <span class="value">CHF ${cube.price.toFixed(2)}</span>
      </div>
    `);
  }
  
  if (fieldsToSync.includes('inventory')) {
    fields.push(`
      <div class="data-row">
        <span class="label">Stock:</span>
        <span class="value">${cube.stock} units</span>
      </div>
    `);
  }
  
  if (fieldsToSync.includes('images')) {
    fields.push(`
      <div class="data-row">
        <span class="label">Images:</span>
        <span class="value">${cube.images} images</span>
      </div>
    `);
  }
  
  if (fieldsToSync.includes('specifications')) {
    fields.push(`
      <div class="data-row">
        <span class="label">Weight:</span>
        <span class="value">${cube.weight}</span>
      </div>
      <div class="data-row">
        <span class="label">Battery:</span>
        <span class="value">${cube.battery}</span>
      </div>
      <div class="data-row">
        <span class="label">Motor:</span>
        <span class="value">${cube.motor}</span>
      </div>
      <div class="data-row">
        <span class="label">Frame Size:</span>
        <span class="value">${cube.frameSize}</span>
      </div>
      <div class="data-row">
        <span class="label">Wheel Size:</span>
        <span class="value">${cube.wheelSize}</span>
      </div>
      <div class="data-row">
        <span class="label">Brakes:</span>
        <span class="value">${cube.brakes}</span>
      </div>
      <div class="data-row">
        <span class="label">Gears:</span>
        <span class="value">${cube.gears}</span>
      </div>
      <div class="data-row">
        <span class="label">Suspension:</span>
        <span class="value">${cube.suspension}</span>
      </div>
      <div class="data-row">
        <span class="label">Color:</span>
        <span class="value">${cube.color}</span>
      </div>
    `);
  }
  
  if (fieldsToSync.includes('categories')) {
    fields.push(`
      <div class="data-row">
        <span class="label">Tags:</span>
        <span class="value">e-bike, ${cube.category.toLowerCase().replace('-', ' ')}, 2025</span>
      </div>
    `);
  }
  
  return fields.join('');
}

function generateComparisonFields(shopify, cube, fieldsToSync) {
  let beforeFields = [];
  let afterFields = [];
  
  if (fieldsToSync.includes('basic-info')) {
    beforeFields.push(`
      <div class="data-row ${shopify.name !== cube.name ? 'changed' : ''}">
        <span class="label">Name:</span>
        <span class="value">${shopify.name}</span>
      </div>
      <div class="data-row ${shopify.category !== cube.category ? 'changed' : ''}">
        <span class="label">Category:</span>
        <span class="value">${shopify.category}</span>
      </div>
      <div class="data-row description-row ${shopify.description !== cube.description ? 'changed' : ''}">
        <span class="label">Description:</span>
        <div class="value description-text">${shopify.description}</div>
      </div>
    `);
    
    afterFields.push(`
      <div class="data-row ${shopify.name !== cube.name ? 'changed' : ''}">
        <span class="label">Name:</span>
        <span class="value">${cube.name}</span>
      </div>
      <div class="data-row ${shopify.category !== cube.category ? 'changed' : ''}">
        <span class="label">Category:</span>
        <span class="value">${cube.category}</span>
      </div>
      <div class="data-row description-row ${shopify.description !== cube.description ? 'changed' : ''}">
        <span class="label">Description:</span>
        <div class="value description-text">${cube.description}</div>
      </div>
    `);
  }
  
  if (fieldsToSync.includes('pricing')) {
    beforeFields.push(`
      <div class="data-row ${shopify.price !== cube.price ? 'changed' : ''}">
        <span class="label">Price:</span>
        <span class="value">CHF ${shopify.price.toFixed(2)}</span>
      </div>
    `);
    
    afterFields.push(`
      <div class="data-row ${shopify.price !== cube.price ? 'changed' : ''}">
        <span class="label">Price:</span>
        <span class="value ${cube.price > shopify.price ? 'increase' : cube.price < shopify.price ? 'decrease' : ''}">
          CHF ${cube.price.toFixed(2)}
        </span>
      </div>
    `);
  }
  
  if (fieldsToSync.includes('inventory')) {
    beforeFields.push(`
      <div class="data-row ${shopify.stock !== cube.stock ? 'changed' : ''}">
        <span class="label">Stock:</span>
        <span class="value">${shopify.stock} units</span>
      </div>
    `);
    
    afterFields.push(`
      <div class="data-row ${shopify.stock !== cube.stock ? 'changed' : ''}">
        <span class="label">Stock:</span>
        <span class="value ${cube.stock > shopify.stock ? 'increase' : cube.stock < shopify.stock ? 'decrease' : ''}">
          ${cube.stock} units
        </span>
      </div>
    `);
  }
  
  if (fieldsToSync.includes('images')) {
    beforeFields.push(`
      <div class="data-row ${shopify.images !== cube.images ? 'changed' : ''}">
        <span class="label">Images:</span>
        <span class="value">${shopify.images} images</span>
      </div>
    `);
    
    afterFields.push(`
      <div class="data-row ${shopify.images !== cube.images ? 'changed' : ''}">
        <span class="label">Images:</span>
        <span class="value">${cube.images} images</span>
      </div>
    `);
  }
  
  if (fieldsToSync.includes('specifications')) {
    beforeFields.push(`
      <div class="data-row ${shopify.weight !== cube.weight ? 'changed' : ''}">
        <span class="label">Weight:</span>
        <span class="value">${shopify.weight}</span>
      </div>
      <div class="data-row ${shopify.battery !== cube.battery ? 'changed' : ''}">
        <span class="label">Battery:</span>
        <span class="value">${shopify.battery}</span>
      </div>
      <div class="data-row ${shopify.motor !== cube.motor ? 'changed' : ''}">
        <span class="label">Motor:</span>
        <span class="value">${shopify.motor}</span>
      </div>
      <div class="data-row ${shopify.frameSize !== cube.frameSize ? 'changed' : ''}">
        <span class="label">Frame Size:</span>
        <span class="value">${shopify.frameSize}</span>
      </div>
      <div class="data-row ${shopify.wheelSize !== cube.wheelSize ? 'changed' : ''}">
        <span class="label">Wheel Size:</span>
        <span class="value">${shopify.wheelSize}</span>
      </div>
      <div class="data-row ${shopify.brakes !== cube.brakes ? 'changed' : ''}">
        <span class="label">Brakes:</span>
        <span class="value">${shopify.brakes}</span>
      </div>
      <div class="data-row ${shopify.gears !== cube.gears ? 'changed' : ''}">
        <span class="label">Gears:</span>
        <span class="value">${shopify.gears}</span>
      </div>
      <div class="data-row ${shopify.suspension !== cube.suspension ? 'changed' : ''}">
        <span class="label">Suspension:</span>
        <span class="value">${shopify.suspension}</span>
      </div>
      <div class="data-row ${shopify.color !== cube.color ? 'changed' : ''}">
        <span class="label">Color:</span>
        <span class="value">${shopify.color}</span>
      </div>
    `);
    
    afterFields.push(`
      <div class="data-row ${shopify.weight !== cube.weight ? 'changed' : ''}">
        <span class="label">Weight:</span>
        <span class="value">${cube.weight}</span>
      </div>
      <div class="data-row ${shopify.battery !== cube.battery ? 'changed' : ''}">
        <span class="label">Battery:</span>
        <span class="value">${cube.battery}</span>
      </div>
      <div class="data-row ${shopify.motor !== cube.motor ? 'changed' : ''}">
        <span class="label">Motor:</span>
        <span class="value">${cube.motor}</span>
      </div>
      <div class="data-row ${shopify.frameSize !== cube.frameSize ? 'changed' : ''}">
        <span class="label">Frame Size:</span>
        <span class="value">${cube.frameSize}</span>
      </div>
      <div class="data-row ${shopify.wheelSize !== cube.wheelSize ? 'changed' : ''}">
        <span class="label">Wheel Size:</span>
        <span class="value">${cube.wheelSize}</span>
      </div>
      <div class="data-row ${shopify.brakes !== cube.brakes ? 'changed' : ''}">
        <span class="label">Brakes:</span>
        <span class="value">${cube.brakes}</span>
      </div>
      <div class="data-row ${shopify.gears !== cube.gears ? 'changed' : ''}">
        <span class="label">Gears:</span>
        <span class="value">${cube.gears}</span>
      </div>
      <div class="data-row ${shopify.suspension !== cube.suspension ? 'changed' : ''}">
        <span class="label">Suspension:</span>
        <span class="value">${cube.suspension}</span>
      </div>
      <div class="data-row ${shopify.color !== cube.color ? 'changed' : ''}">
        <span class="label">Color:</span>
        <span class="value">${cube.color}</span>
      </div>
    `);
  }
  
  return { before: beforeFields.join(''), after: afterFields.join('') };
}

function setupPreviewTabs() {
  const tabs = document.querySelectorAll('.detail-tab');
  const panes = document.querySelectorAll('.tab-pane');
  
  tabs.forEach(tab => {
    tab.addEventListener('click', function() {
      const tabId = this.dataset.tab;
      
      // Remove active class from all tabs and panes
      tabs.forEach(t => t.classList.remove('active'));
      panes.forEach(p => p.classList.remove('active'));
      
      // Add active class to clicked tab and corresponding pane
      this.classList.add('active');
      document.getElementById(`${tabId}-tab`).classList.add('active');
    });
  });
}

function resolveConflict(productId, resolution) {
  // Update UI to show selection
  const conflictCard = document.querySelector(`[data-product-id="${productId}"]`);
  const buttons = conflictCard?.querySelectorAll('.conflict-btn') || [];
  
  buttons.forEach(btn => btn.classList.remove('selected'));
  event.target.classList.add('selected');
  
  // Store resolution decision
  window.conflictResolutions = window.conflictResolutions || {};
  window.conflictResolutions[productId] = resolution;
  
  showNotification(`Conflict resolved: ${resolution} data will be used`, 'info');
}

function cancelPreview() {
  document.getElementById('sync-preview').style.display = 'none';
  showNotification('Preview cancelled', 'info');
}

function approveSync() {
  showNotification('Starting approved sync...', 'info');
  
  // Hide preview
  document.getElementById('sync-preview').style.display = 'none';
  
  // Execute sync
  executeSync();
}

function manualSync() {
  const syncMode = document.querySelector('input[name="sync-mode"]:checked').value;
  
  if (syncMode === 'preview') {
    previewSync();
  } else {
    executeSync();
  }
}

function executeSync() {
  showNotification('Executing sync operation...', 'info');
  
  // Simulate sync process
  const startTime = Date.now();
  
  setTimeout(() => {
    const syncResult = {
      success: true,
      newProducts: Math.floor(Math.random() * 15) + 5,
      updatedProducts: Math.floor(Math.random() * 25) + 10,
      errors: Math.floor(Math.random() * 2)
    };
    
    // Update sync history
    const historyEntry = {
      timestamp: Date.now(),
      type: 'Manual Sync',
      result: syncResult
    };
    
    addSyncHistoryEntry(historyEntry);
    
    // Update last sync time
    localStorage.setItem('cube_last_sync', startTime.toString());
    document.getElementById('last-sync-time').textContent = new Date(startTime).toLocaleString();
    
    // Update synced products count
    const currentSynced = parseInt(document.getElementById('synced-products').textContent) || 0;
    document.getElementById('synced-products').textContent = currentSynced + syncResult.newProducts;
    
    if (syncResult.success) {
      showNotification(`Sync completed! ${syncResult.newProducts} new, ${syncResult.updatedProducts} updated`, 'success');
    } else {
      showNotification('Sync completed with errors - check history for details', 'warning');
    }
  }, 5000);
}

function saveSchedule() {
  const schedule = document.querySelector('input[name="schedule"]:checked').value;
  
  let scheduleConfig = { type: schedule };
  
  if (schedule === 'custom') {
    scheduleConfig.hour = document.getElementById('schedule-hour').value;
    scheduleConfig.days = Array.from(document.querySelectorAll('.day-checkboxes input:checked')).map(cb => cb.value);
  }
  
  localStorage.setItem('cube_sync_schedule', JSON.stringify(scheduleConfig));
  showNotification('Sync schedule saved successfully', 'success');
  
  console.log('Schedule saved:', scheduleConfig);
}

function addSyncHistoryEntry(entry) {
  const history = JSON.parse(localStorage.getItem('cube_sync_history') || '[]');
  history.unshift(entry);
  
  // Keep only last 20 entries
  if (history.length > 20) {
    history.splice(20);
  }
  
  localStorage.setItem('cube_sync_history', JSON.stringify(history));
  updateSyncHistory(history);
}

function updateSyncHistory(history) {
  const historyList = document.getElementById('sync-history-list');
  
  historyList.innerHTML = history.slice(0, 10).map(entry => {
    const result = entry.result || {};
    const success = result.success !== false;
    const icon = success ? '✅' : '❌';
    
    let resultText;
    if (success) {
      resultText = `${result.newProducts || 0} new, ${result.updatedProducts || 0} updated`;
      if (result.errors && result.errors > 0) {
        resultText += `, ${result.errors} errors`;
      }
    } else {
      resultText = result.message || 'Sync failed';
    }
    
    return `
      <div class="history-item">
        <div class="history-time">${new Date(entry.timestamp).toLocaleString()}</div>
        <div class="history-action">${entry.type}</div>
        <div class="history-result">${icon} ${resultText}</div>
      </div>
    `;
  }).join('');
}

function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.className = `sync-notification sync-notification-${type}`;
  notification.innerHTML = `
    <div class="notification-content">
      <span>${message}</span>
      <button onclick="this.parentElement.parentElement.remove()">×</button>
    </div>
  `;
  
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: ${type === 'success' ? '#d4edda' : type === 'error' ? '#f8d7da' : type === 'warning' ? '#fff3cd' : '#d1ecf1'};
    color: ${type === 'success' ? '#155724' : type === 'error' ? '#721c24' : type === 'warning' ? '#856404' : '#0c5460'};
    padding: 15px 20px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    z-index: 10000;
    max-width: 400px;
    animation: slideIn 0.3s ease;
    display: flex;
    justify-content: space-between;
    align-items: center;
  `;
  
  document.body.appendChild(notification);
  
  setTimeout(() => {
    if (notification.parentElement) {
      notification.remove();
    }
  }, 5000);
}
</script>

{% schema %}
{
  "name": "Cube Sync Manager",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "Cube Sync Manager"
    },
    {
      "type": "textarea",
      "id": "subtitle",
      "label": "Section Subtitle",
      "default": "Granular control over product synchronization from Cube Connect API"
    }
  ],
  "presets": [
    {
      "name": "Cube Sync Manager",
      "category": "Admin Tools"
    }
  ]
}
{% endschema %}