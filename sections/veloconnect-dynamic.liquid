{% comment %}
  VeloConnect Dynamic Supplier Management
  Supports 10 suppliers with secure credential storage
{% endcomment %}

<div class="veloconnect-dynamic-section" data-section-id="{{ section.id }}">
  <div class="container">
    <div class="veloconnect-header">
      <h2>{{ section.settings.title | default: 'VeloConnect Supplier Management' }}</h2>
      <p>{{ section.settings.subtitle | default: 'Configure and manage supplier API connections' }}</p>
    </div>

    <div class="suppliers-grid">
      <!-- Cube (Direct + VeloConnect) -->
      <div class="supplier-card" data-supplier="cube">
        <div class="supplier-header">
          <h3>Cube Bikes</h3>
          <span class="connection-status" id="cube-status">
            <i class="fa fa-circle"></i> <span>Checking...</span>
          </span>
        </div>
      <div class="supplier-body">
          <div class="credentials-form">
            <input type="text" placeholder="Vendor Base URL" id="cube-base-url" class="credential-input" value="https://Veloconnect.cube.eu/Veloconnect">
          </div>
          <div class="connection-modes">
            <label class="mode-selector">
              <input type="radio" name="cube-mode" value="direct" checked>
              <span>Direct API</span>
            </label>
            <label class="mode-selector">
              <input type="radio" name="cube-mode" value="veloconnect">
              <span>VeloConnect</span>
            </label>
          </div>
          
          <div class="credentials-form" id="cube-direct-form">
            <input type="text" placeholder="Client ID" id="cube-client-id" class="credential-input" value="278f9529-94ae-448c-a46c-e84125a2e15d">
            <input type="password" placeholder="Client Secret" id="cube-client-secret" class="credential-input">
            <input type="text" placeholder="API Key" id="cube-api-key" class="credential-input" value="f9f4a637e9354bd3a2795c210b90a530">
            <input type="text" placeholder="ACR Values (Tenant)" id="cube-acr-values" class="credential-input" value="tenant:c4c124a7-3f84-4f9d-bcd4-67316c7bba01">
            <div class="token-section">
              <label class="form-label">24-Hour Access Token</label>
              <textarea placeholder="Paste your generated 24-hour token here..." id="cube-access-token" class="credential-input token-textarea"></textarea>
              <small class="token-help">Generate a new token in Cube Connect portal if expired</small>
            </div>
          </div>
          
          <div class="credentials-form hidden" id="cube-veloconnect-form">
            <input type="text" placeholder="VeloConnect Username" id="cube-vc-username" class="credential-input">
            <input type="password" placeholder="VeloConnect Password" id="cube-vc-password" class="credential-input">
          </div>
          
          <div class="supplier-actions">
            <button class="btn-test" onclick="testSupplierConnection('cube')">Test Connection</button>
            <button class="btn-save" onclick="saveSupplierCredentials('cube')">Save Credentials</button>
          </div>
        </div>
      </div>

      <!-- ABUS -->
      <div class="supplier-card" data-supplier="abus">
        <div class="supplier-header">
          <h3>ABUS</h3>
          <span class="connection-status" id="abus-status">
            <i class="fa fa-circle"></i> <span>Not Configured</span>
          </span>
        </div>
      <div class="supplier-body">
          <div class="credentials-form">
            <input type="text" placeholder="Vendor Base URL" id="abus-base-url" class="credential-input" value="https://partner-de.abus.com/Veloconnect">
          </div>
          <div class="credentials-form">
            <input type="text" placeholder="Username" id="abus-username" class="credential-input">
            <input type="password" placeholder="Password" id="abus-password" class="credential-input">
            <input type="text" placeholder="API Key" id="abus-api-key" class="credential-input">
          </div>
          <div class="supplier-actions">
            <button class="btn-test" onclick="testSupplierConnection('abus')">Test Connection</button>
            <button class="btn-save" onclick="saveSupplierCredentials('abus')">Save Credentials</button>
          </div>
        </div>
      </div>

      <!-- Amsler -->
      <div class="supplier-card" data-supplier="amsler">
        <div class="supplier-header">
          <h3>Amsler</h3>
          <span class="connection-status" id="amsler-status">
            <i class="fa fa-circle"></i> <span>Not Configured</span>
          </span>
        </div>
      <div class="supplier-body">
          <div class="credentials-form">
            <input type="text" placeholder="Vendor Base URL" id="amsler-base-url" class="credential-input" value="https://avcws.amslershop.ch/default.ashx">
          </div>
          <div class="credentials-form">
            <input type="text" placeholder="Username" id="amsler-username" class="credential-input">
            <input type="password" placeholder="Password" id="amsler-password" class="credential-input">
            <input type="text" placeholder="Client ID" id="amsler-client-id" class="credential-input">
          </div>
          <div class="supplier-actions">
            <button class="btn-test" onclick="testSupplierConnection('amsler')">Test Connection</button>
            <button class="btn-save" onclick="saveSupplierCredentials('amsler')">Save Credentials</button>
          </div>
        </div>
      </div>

      <!-- Chris Sports -->
      <div class="supplier-card" data-supplier="chris-sports">
        <div class="supplier-header">
          <h3>Chris Sports</h3>
          <span class="connection-status" id="chris-sports-status">
            <i class="fa fa-circle"></i> <span>Not Configured</span>
          </span>
        </div>
      <div class="supplier-body">
          <div class="credentials-form">
            <input type="text" placeholder="Vendor Base URL" id="chris-sports-base-url" class="credential-input" value="http://chrissports.velocom.de/">
          </div>
          <div class="credentials-form">
            <input type="text" placeholder="API Key" id="chris-sports-api-key" class="credential-input">
            <input type="text" placeholder="Store ID" id="chris-sports-store-id" class="credential-input">
          </div>
          <div class="supplier-actions">
            <button class="btn-test" onclick="testSupplierConnection('chris-sports')">Test Connection</button>
            <button class="btn-save" onclick="saveSupplierCredentials('chris-sports')">Save Credentials</button>
          </div>
        </div>
      </div>

      <!-- Komenda -->
      <div class="supplier-card" data-supplier="komenda">
        <div class="supplier-header">
          <h3>Komenda</h3>
          <span class="connection-status" id="komenda-status">
            <i class="fa fa-circle"></i> <span>Not Configured</span>
          </span>
        </div>
      <div class="supplier-body">
          <div class="credentials-form">
            <input type="text" placeholder="Vendor Base URL" id="komenda-base-url" class="credential-input" value="http://komenda.velocom.de/">
          </div>
          <div class="credentials-form">
            <input type="text" placeholder="API Key" id="komenda-api-key" class="credential-input">
            <input type="text" placeholder="Account ID" id="komenda-account-id" class="credential-input">
          </div>
          <div class="supplier-actions">
            <button class="btn-test" onclick="testSupplierConnection('komenda')">Test Connection</button>
            <button class="btn-save" onclick="saveSupplierCredentials('komenda')">Save Credentials</button>
          </div>
        </div>
      </div>

      <!-- Magura -->
      <div class="supplier-card" data-supplier="magura">
        <div class="supplier-header">
          <h3>Magura</h3>
          <span class="connection-status" id="magura-status">
            <i class="fa fa-circle"></i> <span>Not Configured</span>
          </span>
        </div>
      <div class="supplier-body">
          <div class="credentials-form">
            <input type="text" placeholder="Vendor Base URL" id="magura-base-url" class="credential-input" value="http://magura.velocom.de/">
          </div>
          <div class="credentials-form">
            <input type="text" placeholder="Username" id="magura-username" class="credential-input">
            <input type="password" placeholder="Password" id="magura-password" class="credential-input">
          </div>
          <div class="supplier-actions">
            <button class="btn-test" onclick="testSupplierConnection('magura')">Test Connection</button>
            <button class="btn-save" onclick="saveSupplierCredentials('magura')">Save Credentials</button>
          </div>
        </div>
      </div>

      <!-- Maxxis -->
      <div class="supplier-card" data-supplier="maxxis">
        <div class="supplier-header">
          <h3>Maxxis</h3>
          <span class="connection-status" id="maxxis-status">
            <i class="fa fa-circle"></i> <span>Not Configured</span>
          </span>
        </div>
      <div class="supplier-body">
          <div class="credentials-form">
            <input type="text" placeholder="Vendor Base URL" id="maxxis-base-url" class="credential-input" value="https://velo.maxxisstore.de/">
          </div>
          <div class="credentials-form">
            <input type="text" placeholder="Client ID" id="maxxis-client-id" class="credential-input">
            <input type="password" placeholder="API Secret" id="maxxis-api-secret" class="credential-input">
          </div>
          <div class="supplier-actions">
            <button class="btn-test" onclick="testSupplierConnection('maxxis')">Test Connection</button>
            <button class="btn-save" onclick="saveSupplierCredentials('maxxis')">Save Credentials</button>
          </div>
        </div>
      </div>

      <!-- Orbea -->
      <div class="supplier-card" data-supplier="orbea">
        <div class="supplier-header">
          <h3>Orbea</h3>
          <span class="connection-status" id="orbea-status">
            <i class="fa fa-circle"></i> <span>Not Configured</span>
          </span>
        </div>
      <div class="supplier-body">
          <div class="credentials-form">
            <input type="text" placeholder="Vendor Base URL" id="orbea-base-url" class="credential-input" value="https://api.orbea.veloconnect.io/">
          </div>
          <div class="credentials-form">
            <input type="text" placeholder="Username" id="orbea-username" class="credential-input">
            <input type="password" placeholder="Password" id="orbea-password" class="credential-input">
            <input type="text" placeholder="Dealer ID" id="orbea-dealer-id" class="credential-input">
          </div>
          <div class="supplier-actions">
            <button class="btn-test" onclick="testSupplierConnection('orbea')">Test Connection</button>
            <button class="btn-save" onclick="saveSupplierCredentials('orbea')">Save Credentials</button>
          </div>
        </div>
      </div>

      <!-- SKS -->
      <div class="supplier-card" data-supplier="sks">
        <div class="supplier-header">
          <h3>SKS</h3>
          <span class="connection-status" id="sks-status">
            <i class="fa fa-circle"></i> <span>Not Configured</span>
          </span>
        </div>
      <div class="supplier-body">
          <div class="credentials-form">
            <input type="text" placeholder="Vendor Base URL" id="sks-base-url" class="credential-input" value="http://sks.velocom.de/veloconnect">
          </div>
          <div class="credentials-form">
            <input type="text" placeholder="API Key" id="sks-api-key" class="credential-input">
            <input type="password" placeholder="Secret Key" id="sks-secret-key" class="credential-input">
          </div>
          <div class="supplier-actions">
            <button class="btn-test" onclick="testSupplierConnection('sks')">Test Connection</button>
            <button class="btn-save" onclick="saveSupplierCredentials('sks')">Save Credentials</button>
          </div>
        </div>
      </div>

      <!-- Tour de Suisse -->
      <div class="supplier-card" data-supplier="tour-de-suisse">
        <div class="supplier-header">
          <h3>Tour de Suisse</h3>
          <span class="connection-status" id="tour-de-suisse-status">
            <i class="fa fa-circle"></i> <span>Not Configured</span>
          </span>
        </div>
      <div class="supplier-body">
          <div class="credentials-form">
            <input type="text" placeholder="Vendor Base URL" id="tour-de-suisse-base-url" class="credential-input" value="http://shop.tds-rad.ch/vc/">
          </div>
          <div class="credentials-form">
            <input type="text" placeholder="Username" id="tour-de-suisse-username" class="credential-input">
            <input type="password" placeholder="Password" id="tour-de-suisse-password" class="credential-input">
            <input type="text" placeholder="API Key" id="tour-de-suisse-api-key" class="credential-input">
          </div>
          <div class="supplier-actions">
            <button class="btn-test" onclick="testSupplierConnection('tour-de-suisse')">Test Connection</button>
            <button class="btn-save" onclick="saveSupplierCredentials('tour-de-suisse')">Save Credentials</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Bulk Actions -->
    <div class="bulk-actions">
      <button class="btn-bulk" onclick="testAllConnections()">
        <i class="fa fa-check-circle"></i> Test All Connections
      </button>
      <button class="btn-bulk" onclick="syncAllProducts()">
        <i class="fa fa-sync"></i> Sync All Products
      </button>
      <button class="btn-bulk" onclick="viewIntegrationLogs()">
        <i class="fa fa-list"></i> View Logs
      </button>
    </div>
  </div>
</div>

<style>
  :root {
    --gs-accent: {{ settings.color_main2 | default: '#ff4040' }};
    --gs-primary: {{ settings.color_main | default: '#333333' }};
    --gs-muted: #6c757d;
    --gs-bg: {{ settings.bg_color_body | default: '#f8f9fa' }};
    --gs-border: #e9ecef;
  }
  .veloconnect-dynamic-section {
    padding: 40px 0;
    background: #f8f9fa;
  }

  .veloconnect-header {
    text-align: center;
    margin-bottom: 40px;
  }

  .veloconnect-header h2 {
    font-size: 32px;
    color: #333;
    margin-bottom: 10px;
  }

  .veloconnect-header p {
    color: #6c757d;
    font-size: 16px;
  }

  .suppliers-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 20px;
    margin-bottom: 40px;
  }

  .supplier-card {
    background: white;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
  }

  .supplier-card:hover {
    box-shadow: 0 4px 16px rgba(0,0,0,0.15);
    transform: translateY(-2px);
  }

  .supplier-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 2px solid #f0f0f0;
  }

  .supplier-header h3 {
    margin: 0;
    font-size: 18px;
    color: #333;
  }

  .connection-status {
    display: flex;
    align-items: center;
    gap: 5px;
    font-size: 12px;
  }

  .connection-status i {
    font-size: 8px;
  }

  .connection-status[data-status="connected"] {
    color: #28a745;
  }

  .connection-status[data-status="error"] {
    color: #dc3545;
  }

  .connection-status[data-status="pending"] {
    color: #ffc107;
  }

  .connection-modes {
    display: flex;
    gap: 15px;
    margin-bottom: 15px;
  }

  .mode-selector {
    display: flex;
    align-items: center;
    gap: 5px;
    cursor: pointer;
  }

  .mode-selector input[type="radio"] {
    margin: 0;
  }

  .credentials-form {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-bottom: 15px;
  }

  .credentials-form.hidden {
    display: none;
  }

  .credential-input {
    width: 100%;
    padding: 10px 12px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 14px;
    transition: border-color 0.3s ease;
  }

  .credential-input:focus {
    outline: none;
    border-color: #333;
    box-shadow: 0 0 0 3px rgba(51,51,51,0.1);
  }

  .token-section {
    margin-top: 15px;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 8px;
    border: 2px dashed #dee2e6;
  }

  .token-textarea {
    min-height: 120px;
    resize: vertical;
    font-family: monospace;
    font-size: 12px;
  }

  .token-help {
    display: block;
    color: #6c757d;
    font-size: 11px;
    margin-top: 8px;
    font-style: italic;
  }

  .form-label {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
    color: #333;
    font-size: 13px;
  }

  .supplier-actions {
    display: flex;
    gap: 10px;
  }

  .btn-test, .btn-save {
    flex: 1;
    padding: 10px;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .btn-test {
    background: var(--gs-muted);
    color: white;
  }

  .btn-test:hover {
    background: #5a6268;
  }

  .btn-save {
    background: #28a745;
    color: white;
  }

  .btn-save:hover {
    background: #218838;
  }

  .bulk-actions {
    display: flex;
    justify-content: center;
    gap: 15px;
    padding-top: 20px;
    border-top: 2px solid #e9ecef;
  }

  .btn-bulk {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 12px 24px;
    background: #333;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 15px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .btn-bulk:hover {
    background: #555;
    transform: translateY(-1px);
  }

  @media (max-width: 768px) {
    .suppliers-grid {
      grid-template-columns: 1fr;
    }
    
    .bulk-actions {
      flex-direction: column;
    }
    
    .btn-bulk {
      width: 100%;
      justify-content: center;
    }
  }
</style>

<script src="{{ 'admin-credentials-manager.js' | asset_url }}"></script>
<script>
// VeloConnect Dynamic Management Script
document.addEventListener('DOMContentLoaded', function() {
  // Initialize all supplier statuses
  initializeSupplierStatuses();
  // Load existing vendors from backend to prefill base URLs and vendor ids
  loadVendorsFromBackend();
  
  // Setup Cube mode switching
  setupCubeModeSwitch();
  
  // Load saved credentials
  loadSavedCredentials();
});

// Initialize supplier statuses
async function initializeSupplierStatuses() {
  const suppliers = ['cube', 'abus', 'amsler', 'chris-sports', 'komenda', 'magura', 'maxxis', 'orbea', 'sks', 'tour-de-suisse'];
  
  for (const supplier of suppliers) {
    const credentials = await window.GodspeedCredentials.getCredentials(supplier);
    const statusElement = document.getElementById(`${supplier}-status`);
    
    if (credentials) {
      statusElement.setAttribute('data-status', 'pending');
      statusElement.innerHTML = '<i class="fa fa-circle"></i> <span>Configured</span>';
      statusElement.style.color = '#ffc107';
    } else {
      statusElement.setAttribute('data-status', 'error');
      statusElement.innerHTML = '<i class="fa fa-circle"></i> <span>Not Configured</span>';
      statusElement.style.color = '#dc3545';
    }
  }
}

async function loadVendorsFromBackend() {
  try {
    const backendBase = 'https://bookings-api-802427545823.europe-west6.run.app';
    const resp = await fetch(`${backendBase}/api/veloconnect/vendors`);
    if (!resp.ok) return;
    const data = await resp.json();
    const vendors = data?.vendors || [];
    vendors.forEach(v => {
      // Save vendorId per name
      localStorage.setItem(`godspeed_vendor_${v.name}_id`, v.id);
      const baseField = document.getElementById(`${v.name}-base-url`);
      if (baseField && v.baseUrl) baseField.value = v.baseUrl;
      updateSupplierStatus(v.name, 'pending');
    });
  } catch (e) {
    console.log('Vendor load failed');
  }
}

// Setup Cube mode switching
function setupCubeModeSwitch() {
  const modeRadios = document.querySelectorAll('input[name="cube-mode"]');
  const directForm = document.getElementById('cube-direct-form');
  const veloconnectForm = document.getElementById('cube-veloconnect-form');
  
  modeRadios.forEach(radio => {
    radio.addEventListener('change', function() {
      if (this.value === 'direct') {
        directForm.classList.remove('hidden');
        veloconnectForm.classList.add('hidden');
      } else {
        directForm.classList.add('hidden');
        veloconnectForm.classList.remove('hidden');
      }
    });
  });
}

// Load saved credentials into forms
async function loadSavedCredentials() {
  const suppliers = ['cube', 'abus', 'amsler', 'chris-sports', 'komenda', 'magura', 'maxxis', 'orbea', 'sks', 'tour-de-suisse'];
  
  for (const supplier of suppliers) {
    const credentials = await window.GodspeedCredentials.getCredentials(supplier);
    if (credentials) {
      populateCredentialFields(supplier, credentials);
    }
  }
}

// Populate credential fields
function populateCredentialFields(supplier, credentials) {
  Object.keys(credentials).forEach(key => {
    const field = document.getElementById(`${supplier}-${key.replace(/([A-Z])/g, '-$1').toLowerCase()}`);
    if (field && field.type !== 'password') {
      field.value = credentials[key];
    }
  });
}

// Save supplier credentials
async function saveSupplierCredentials(supplier) {
  const credentials = {};
  const mode = document.querySelector('input[name="cube-mode"]:checked')?.value;
  const backendBase = 'https://bookings-api-802427545823.europe-west6.run.app';
  const baseUrlMap = {
    cube: 'https://Veloconnect.cube.eu/Veloconnect',
    abus: 'https://partner-de.abus.com/Veloconnect',
    amsler: 'https://avcws.amslershop.ch/default.ashx',
    'chris-sports': 'http://chrissports.velocom.de/',
    komenda: 'http://komenda.velocom.de/',
    magura: 'http://magura.velocom.de/',
    maxxis: 'https://velo.maxxisstore.de/',
    orbea: 'https://api.orbea.veloconnect.io/',
    sks: 'http://sks.velocom.de/veloconnect',
    'tour-de-suisse': 'http://shop.tds-rad.ch/vc/'
  };
  
  if (supplier === 'cube') {
    if (mode === 'direct') {
      credentials.clientId = document.getElementById('cube-client-id').value;
      credentials.clientSecret = document.getElementById('cube-client-secret').value;
      credentials.apiKey = document.getElementById('cube-api-key').value;
      credentials.acrValues = document.getElementById('cube-acr-values').value;
      credentials.accessToken = document.getElementById('cube-access-token').value;
      credentials.mode = 'direct';
    } else {
      credentials.username = document.getElementById('cube-vc-username').value;
      credentials.password = document.getElementById('cube-vc-password').value;
      credentials.mode = 'veloconnect';
    }
  } else {
    // Collect credentials for other suppliers
    const inputs = document.querySelectorAll(`[id^="${supplier}-"]`);
    inputs.forEach(input => {
      const key = input.id.replace(`${supplier}-`, '').replace(/-([a-z])/g, (g) => g[1].toUpperCase());
      credentials[key] = input.value;
    });
  }
  
  try {
    const baseUrlField = document.getElementById(`${supplier}-base-url`);
    const baseUrl = (baseUrlField && baseUrlField.value.trim()) || baseUrlMap[supplier] || '';
    const payload = {
      name: supplier,
      baseUrl,
      protocol: supplier === 'cube' && mode === 'direct' ? 'cube-direct' : 'veloconnect',
      credentials
    };
    const resp = await fetch(`${backendBase}/api/veloconnect/vendors`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
    const data = await resp.json();
    const vendorId = data?.vendor?.id;
    if (vendorId) {
      localStorage.setItem(`godspeed_vendor_${supplier}_id`, vendorId);
    }
    showNotification(`${supplier} credentials saved`, 'success');
    updateSupplierStatus(supplier, 'pending');
  } catch (e) {
    console.error('Save vendor error', e);
    showNotification(`Failed to save ${supplier} credentials`, 'error');
  }
}

// Test supplier connection
async function testSupplierConnection(supplier) {
  showNotification(`Testing ${supplier} connection...`, 'info');
  try {
    const backendBase = 'https://bookings-api-802427545823.europe-west6.run.app';
    const vendorId = localStorage.getItem(`godspeed_vendor_${supplier}_id`);
    if (!vendorId) throw new Error('Vendor not configured');
    const response = await fetch(`${backendBase}/api/veloconnect/health?vendorId=${encodeURIComponent(vendorId)}`);
    if (response.ok) {
      showNotification(`${supplier} connection successful!`, 'success');
      updateSupplierStatus(supplier, 'connected');
    } else {
      showNotification(`${supplier} connection failed`, 'error');
      updateSupplierStatus(supplier, 'error');
    }
  } catch (error) {
    console.error('Connection test error:', error);
    showNotification(`${supplier} connection test failed`, 'error');
    updateSupplierStatus(supplier, 'error');
  }
}

// Update supplier status display
function updateSupplierStatus(supplier, status) {
  const statusElement = document.getElementById(`${supplier}-status`);
  statusElement.setAttribute('data-status', status);
  
  const statusTexts = {
    connected: 'Connected',
    error: 'Error',
    pending: 'Configured'
  };
  
  const statusColors = {
    connected: '#28a745',
    error: '#dc3545',
    pending: '#ffc107'
  };
  
  statusElement.innerHTML = `<i class="fa fa-circle"></i> <span>${statusTexts[status]}</span>`;
  statusElement.style.color = statusColors[status];
}

// Test all connections
async function testAllConnections() {
  const suppliers = ['cube', 'abus', 'amsler', 'chris-sports', 'komenda', 'magura', 'maxxis', 'orbea', 'sks', 'tour-de-suisse'];
  
  showNotification('Testing all connections...', 'info');
  
  for (const supplier of suppliers) {
    await testSupplierConnection(supplier);
  }
}

// Sync all products
async function syncAllProducts() {
  showNotification('Starting product synchronization...', 'info');
  
  try {
    const response = await fetch('https://vendor-connectors-802427545823.europe-west6.run.app/sync', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      }
    });
    
    if (response.ok) {
      showNotification('Product synchronization started', 'success');
    } else {
      showNotification('Product synchronization failed', 'error');
    }
  } catch (error) {
    console.error('Sync error:', error);
    showNotification('Product synchronization failed', 'error');
  }
}

// View integration logs
function viewIntegrationLogs() {
  showNotification('Loading integration logs...', 'info');
  // This would open a modal or navigate to logs page
}

// Show notification
function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.className = `notification notification-${type}`;
  notification.innerHTML = `
    <div class="notification-content">
      <span>${message}</span>
      <button onclick="this.parentElement.parentElement.remove()">×</button>
    </div>
  `;
  
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: ${type === 'success' ? '#d4edda' : type === 'error' ? '#f8d7da' : '#d1ecf1'};
    color: ${type === 'success' ? '#155724' : type === 'error' ? '#721c24' : '#0c5460'};
    padding: 15px 20px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    z-index: 10000;
    max-width: 400px;
    animation: slideIn 0.3s ease;
    display: flex;
    justify-content: space-between;
    align-items: center;
  `;
  
  document.body.appendChild(notification);
  
  setTimeout(() => {
    if (notification.parentElement) {
      notification.remove();
    }
  }, 5000);
}
</script>

{% schema %}
{
  "name": "VeloConnect Dynamic",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "VeloConnect Supplier Management"
    },
    {
      "type": "textarea",
      "id": "subtitle",
      "label": "Section Subtitle",
      "default": "Configure and manage supplier API connections"
    }
  ],
  "presets": [
    {
      "name": "VeloConnect Dynamic",
      "category": "Admin Tools"
    }
  ]
}
{% endschema %}
