{% comment %}
  VeloConnect Credentials Management Section
  GUI for managing API credentials for each supplier using theme CSS classes
{% endcomment %}

<div data-section-id="{{ section.id }}" data-section-type="section-veloconnect-credentials" style="{% if section.settings.margin_top != blank %}margin-top: {{section.settings.margin_top}}px;{%endif%} {% if section.settings.margin_bottom != blank %}margin-bottom: {{section.settings.margin_bottom}}px;{% endif %}">
  <div class="section-veloconnect-credentials mt-all">
    <div class="container container-v2">
      <div class="row justify-content-center">
        <div class="col-lg-10 col-md-12 col-sm-12">
          <div class="credentials-header text-center mb-5">
            {% if section.settings.credentials_title != blank %}
              <h2 class="title title-{{ section.id }} mb-3">{{ section.settings.credentials_title }}</h2>
            {% endif %}
            
            {% if section.settings.credentials_subtitle != blank %}
              <p class="subtitle subtitle-{{ section.id }}">{{ section.settings.credentials_subtitle }}</p>
            {% endif %}
          </div>
          
          <div class="credentials-wrapper">
            <div class="row">
              <!-- Suppliers List -->
              <div class="col-lg-4 col-md-12 mb-4">
                <div class="suppliers-panel">
                  <h4 class="panel-title panel-title-{{ section.id }} mb-3">VeloConnect Suppliers</h4>
                  
                  <div class="suppliers-list" id="suppliers-list-{{ section.id }}">
                    <div class="supplier-item" data-supplier="abus">
                      <div class="supplier-info">
                        <h5 class="supplier-name">ABUS</h5>
                        <span class="supplier-status status-pending" id="status-abus">No Credentials</span>
                      </div>
                      <button class="btn-configure" onclick="configureSupplier('abus', '{{ section.id }}')">Configure</button>
                    </div>
                    
                    <div class="supplier-item" data-supplier="amsler">
                      <div class="supplier-info">
                        <h5 class="supplier-name">Amsler</h5>
                        <span class="supplier-status status-pending" id="status-amsler">No Credentials</span>
                      </div>
                      <button class="btn-configure" onclick="configureSupplier('amsler', '{{ section.id }}')">Configure</button>
                    </div>
                    
                    <div class="supplier-item" data-supplier="chrissport">
                      <div class="supplier-info">
                        <h5 class="supplier-name">ChrisSports</h5>
                        <span class="supplier-status status-pending" id="status-chrissport">No Credentials</span>
                      </div>
                      <button class="btn-configure" onclick="configureSupplier('chrissport', '{{ section.id }}')">Configure</button>
                    </div>
                    
                    <div class="supplier-item" data-supplier="cube">
                      <div class="supplier-info">
                        <h5 class="supplier-name">Cube Bikes</h5>
                        <span class="supplier-status status-configured" id="status-cube">Configured</span>
                      </div>
                      <button class="btn-configure" onclick="configureSupplier('cube', '{{ section.id }}')">Edit</button>
                    </div>
                    
                    <div class="supplier-item" data-supplier="electra">
                      <div class="supplier-info">
                        <h5 class="supplier-name">Electra</h5>
                        <span class="supplier-status status-pending" id="status-electra">No Credentials</span>
                      </div>
                      <button class="btn-configure" onclick="configureSupplier('electra', '{{ section.id }}')">Configure</button>
                    </div>
                    
                    <div class="supplier-item" data-supplier="komenda">
                      <div class="supplier-info">
                        <h5 class="supplier-name">Komenda</h5>
                        <span class="supplier-status status-pending" id="status-komenda">No Credentials</span>
                      </div>
                      <button class="btn-configure" onclick="configureSupplier('komenda', '{{ section.id }}')">Configure</button>
                    </div>
                    
                    <div class="supplier-item" data-supplier="magura">
                      <div class="supplier-info">
                        <h5 class="supplier-name">Magura</h5>
                        <span class="supplier-status status-pending" id="status-magura">No Credentials</span>
                      </div>
                      <button class="btn-configure" onclick="configureSupplier('magura', '{{ section.id }}')">Configure</button>
                    </div>
                    
                    <div class="supplier-item" data-supplier="maxxis">
                      <div class="supplier-info">
                        <h5 class="supplier-name">Maxxis</h5>
                        <span class="supplier-status status-pending" id="status-maxxis">No Credentials</span>
                      </div>
                      <button class="btn-configure" onclick="configureSupplier('maxxis', '{{ section.id }}')">Configure</button>
                    </div>
                    
                    <div class="supplier-item" data-supplier="orbea">
                      <div class="supplier-info">
                        <h5 class="supplier-name">Orbea</h5>
                        <span class="supplier-status status-pending" id="status-orbea">No Credentials</span>
                      </div>
                      <button class="btn-configure" onclick="configureSupplier('orbea', '{{ section.id }}')">Configure</button>
                    </div>
                    
                    <div class="supplier-item" data-supplier="sks">
                      <div class="supplier-info">
                        <h5 class="supplier-name">SKS</h5>
                        <span class="supplier-status status-pending" id="status-sks">No Credentials</span>
                      </div>
                      <button class="btn-configure" onclick="configureSupplier('sks', '{{ section.id }}')">Configure</button>
                    </div>
                    
                    <div class="supplier-item" data-supplier="tourdesuisse">
                      <div class="supplier-info">
                        <h5 class="supplier-name">Tour de Suisse</h5>
                        <span class="supplier-status status-pending" id="status-tourdesuisse">No Credentials</span>
                      </div>
                      <button class="btn-configure" onclick="configureSupplier('tourdesuisse', '{{ section.id }}')">Configure</button>
                    </div>
                  </div>
                  
                  <div class="bulk-actions mt-4">
                    <button type="button" class="btn btn-test-all-{{ section.id }}" id="test-all-{{ section.id }}">
                      <i class="fa fa-check-circle"></i>
                      Test All Connections
                    </button>
                    
                    <button type="button" class="btn btn-export-{{ section.id }}" id="export-credentials-{{ section.id }}">
                      <i class="fa fa-download"></i>
                      Export Settings
                    </button>
                  </div>
                </div>
              </div>
              
              <!-- Configuration Panel -->
              <div class="col-lg-8 col-md-12">
                <div class="configuration-panel">
                  <div class="config-header mb-4">
                    <h4 class="config-title config-title-{{ section.id }}">Supplier Configuration</h4>
                    <p class="config-subtitle">Select a supplier from the list to configure API credentials</p>
                  </div>
                  
                  <div class="config-content" id="config-content-{{ section.id }}">
                    <div class="empty-state text-center">
                      <i class="fa fa-cog fa-3x mb-3"></i>
                      <h5>Select a Supplier to Configure</h5>
                      <p>Choose a supplier from the left panel to enter API credentials and test the connection.</p>
                      
                      <div class="info-cards mt-4">
                        <div class="row">
                          <div class="col-md-6 mb-3">
                            <div class="info-card">
                              <i class="fa fa-shield-alt"></i>
                              <h6>Secure Storage</h6>
                              <p>Credentials are securely stored and encrypted</p>
                            </div>
                          </div>
                          <div class="col-md-6 mb-3">
                            <div class="info-card">
                              <i class="fa fa-sync"></i>
                              <h6>Connection Testing</h6>
                              <p>Test each connection before saving credentials</p>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Configuration Modal -->
<div class="credentials-modal" id="credentials-modal-{{ section.id }}" style="display: none;">
  <div class="modal-overlay"></div>
  <div class="modal-content">
    <div class="modal-header">
      <h4 class="modal-title" id="modal-title-{{ section.id }}">Configure Supplier</h4>
      <button class="modal-close" onclick="closeCredentialsModal('{{ section.id }}')">&times;</button>
    </div>
    
    <div class="modal-body">
      <form id="credentials-form-{{ section.id }}">
        <div class="supplier-details mb-4">
          <div class="detail-item">
            <label>Supplier:</label>
            <span id="modal-supplier-name-{{ section.id }}">-</span>
          </div>
          <div class="detail-item">
            <label>Endpoint:</label>
            <span id="modal-endpoint-{{ section.id }}">-</span>
          </div>
        </div>
        
        <div class="form-group mb-3">
          <label for="modal-username-{{ section.id }}" class="form-label">Username/API Key</label>
          <input type="text" id="modal-username-{{ section.id }}" class="form-control" required>
        </div>
        
        <div class="form-group mb-3">
          <label for="modal-password-{{ section.id }}" class="form-label">Password/API Secret</label>
          <input type="password" id="modal-password-{{ section.id }}" class="form-control" required>
        </div>
        
        <div class="form-group mb-4">
          <label class="form-checkbox">
            <input type="checkbox" id="modal-show-password-{{ section.id }}" onchange="togglePasswordVisibility('{{ section.id }}')">
            <span class="checkmark"></span>
            <span class="checkbox-text">Show password</span>
          </label>
        </div>
        
        <div class="test-section mb-4">
          <button type="button" class="btn btn-test-{{ section.id }}" id="test-connection-{{ section.id }}">
            <i class="fa fa-plug"></i>
            Test Connection
          </button>
          <div class="test-result" id="test-result-{{ section.id }}" style="display: none;"></div>
        </div>
      </form>
    </div>
    
    <div class="modal-footer">
      <button type="button" class="btn btn-cancel" onclick="closeCredentialsModal('{{ section.id }}')">Cancel</button>
      <button type="button" class="btn btn-save-{{ section.id }}" id="save-credentials-{{ section.id }}">
        <i class="fa fa-save"></i>
        Save Credentials
      </button>
    </div>
  </div>
</div>

<style>
  .section-veloconnect-credentials {
    padding: 80px 0;
    background: #fff;
  }
  
  .section-veloconnect-credentials .title-{{ section.id }} {
    color: {{ section.settings.color_title | default: '#333' }};
    font-size: 36px;
    font-weight: 700;
    line-height: 1.2;
  }
  
  .section-veloconnect-credentials .subtitle-{{ section.id }} {
    color: {{ section.settings.color_subtitle | default: '#6c757d' }};
    font-size: 18px;
    line-height: 1.6;
    max-width: 800px;
    margin: 0 auto;
  }
  
  .credentials-wrapper {
    background: #f8f9fa;
    padding: 2rem;
    border-radius: 16px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
  }
  
  .suppliers-panel {
    background: #fff;
    padding: 1.5rem;
    border-radius: 12px;
    height: fit-content;
    position: sticky;
    top: 2rem;
  }
  
  .panel-title-{{ section.id }} {
    color: {{ section.settings.color_title | default: '#333' }};
    font-size: 18px;
    font-weight: 600;
    margin: 0;
  }
  
  .suppliers-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }
  
  .supplier-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 8px;
    border: 2px solid transparent;
    transition: all 0.3s ease;
  }
  
  .supplier-item:hover {
    border-color: {{ section.settings.color_title | default: '#333' }};
  }
  
  .supplier-info {
    flex: 1;
  }
  
  .supplier-name {
    font-size: 14px;
    font-weight: 600;
    color: #333;
    margin: 0 0 0.25rem 0;
  }
  
  .supplier-status {
    font-size: 12px;
    font-weight: 500;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    text-transform: uppercase;
  }
  
  .status-configured {
    background: #d4edda;
    color: #155724;
  }
  
  .status-pending {
    background: #fff3cd;
    color: #856404;
  }
  
  .status-error {
    background: #f8d7da;
    color: #721c24;
  }
  
  .btn-configure {
    background: {{ section.settings.color_title | default: '#333' }};
    color: #fff;
    border: none;
    padding: 6px 12px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .btn-configure:hover {
    background: #555;
    transform: translateY(-1px);
  }
  
  .bulk-actions {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    border-top: 1px solid #e9ecef;
    padding-top: 1rem;
  }
  
  .btn-test-all-{{ section.id }}, .btn-export-{{ section.id }} {
    background: #17a2b8;
    color: #fff;
    padding: 8px 16px;
    border: 2px solid #17a2b8;
    border-radius: 6px;
    font-size: 12px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }
  
  .btn-test-all-{{ section.id }}:hover, .btn-export-{{ section.id }}:hover {
    background: #138496;
    border-color: #138496;
  }
  
  .configuration-panel {
    background: #fff;
    padding: 1.5rem;
    border-radius: 12px;
    min-height: 500px;
  }
  
  .config-title-{{ section.id }} {
    color: {{ section.settings.color_title | default: '#333' }};
    font-size: 20px;
    font-weight: 600;
    margin: 0;
  }
  
  .config-subtitle {
    color: #6c757d;
    font-size: 14px;
    margin: 0.5rem 0 0 0;
  }
  
  .empty-state {
    padding: 3rem 2rem;
    color: #6c757d;
  }
  
  .empty-state i {
    color: #dee2e6;
  }
  
  .info-cards {
    max-width: 500px;
    margin: 0 auto;
  }
  
  .info-card {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    text-align: center;
    height: 100%;
    border: 2px solid transparent;
    transition: all 0.3s ease;
  }
  
  .info-card:hover {
    border-color: {{ section.settings.color_title | default: '#333' }};
    transform: translateY(-2px);
  }
  
  .info-card i {
    font-size: 24px;
    color: {{ section.settings.color_title | default: '#333' }};
    margin-bottom: 0.5rem;
  }
  
  .info-card h6 {
    font-size: 14px;
    font-weight: 600;
    color: #333;
    margin-bottom: 0.5rem;
  }
  
  .info-card p {
    font-size: 12px;
    color: #6c757d;
    margin: 0;
    line-height: 1.4;
  }
  
  /* Modal Styles */
  .credentials-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
  }
  
  .modal-content {
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    max-width: 500px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
    z-index: 1;
  }
  
  .modal-header {
    padding: 1.5rem;
    border-bottom: 1px solid #e9ecef;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .modal-title {
    font-size: 18px;
    font-weight: 600;
    color: #333;
    margin: 0;
  }
  
  .modal-close {
    background: none;
    border: none;
    font-size: 24px;
    color: #6c757d;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .modal-close:hover {
    color: #333;
  }
  
  .modal-body {
    padding: 1.5rem;
  }
  
  .supplier-details {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 6px;
    border-left: 4px solid {{ section.settings.color_title | default: '#333' }};
  }
  
  .detail-item {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.5rem;
    font-size: 14px;
  }
  
  .detail-item:last-child {
    margin-bottom: 0;
  }
  
  .detail-item label {
    font-weight: 600;
    color: #333;
  }
  
  .detail-item span {
    color: #6c757d;
    word-break: break-all;
  }
  
  .form-group {
    margin-bottom: 1rem;
  }
  
  .form-label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 600;
    color: #333;
    font-size: 14px;
  }
  
  .form-control {
    width: 100%;
    padding: 10px 14px;
    border: 2px solid #e9ecef;
    border-radius: 6px;
    font-size: 14px;
    font-family: 'SofiaPro', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    transition: border-color 0.3s ease;
  }
  
  .form-control:focus {
    outline: none;
    border-color: {{ section.settings.color_title | default: '#333' }};
  }
  
  .form-checkbox {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
  }
  
  .form-checkbox input[type="checkbox"] {
    width: 16px;
    height: 16px;
  }
  
  .checkbox-text {
    font-size: 14px;
    color: #333;
  }
  
  .test-section {
    border-top: 1px solid #e9ecef;
    padding-top: 1rem;
  }
  
  .btn-test-{{ section.id }} {
    background: #28a745;
    color: #fff;
    padding: 8px 16px;
    border: 2px solid #28a745;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .btn-test-{{ section.id }}:hover {
    background: #218838;
    border-color: #218838;
  }
  
  .test-result {
    margin-top: 1rem;
    padding: 0.75rem;
    border-radius: 6px;
    font-size: 14px;
  }
  
  .test-success {
    background: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }
  
  .test-error {
    background: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }
  
  .modal-footer {
    padding: 1rem 1.5rem;
    border-top: 1px solid #e9ecef;
    display: flex;
    justify-content: flex-end;
    gap: 0.75rem;
  }
  
  .btn-cancel {
    background: #6c757d;
    color: #fff;
    padding: 8px 16px;
    border: 2px solid #6c757d;
    border-radius: 6px;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .btn-cancel:hover {
    background: #545b62;
    border-color: #545b62;
  }
  
  .btn-save-{{ section.id }} {
    background: {{ section.settings.color_title | default: '#333' }};
    color: #fff;
    padding: 8px 16px;
    border: 2px solid {{ section.settings.color_title | default: '#333' }};
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .btn-save-{{ section.id }}:hover {
    background: #555;
    border-color: #555;
  }
  
  @media (max-width: 992px) {
    .suppliers-panel {
      position: static;
      margin-bottom: 2rem;
    }
    
    .modal-content {
      margin: 1rem;
      width: calc(100% - 2rem);
    }
  }
  
  @media (max-width: 768px) {
    .section-veloconnect-credentials {
      padding: 60px 0;
    }
    
    .section-veloconnect-credentials .title-{{ section.id }} {
      font-size: 28px;
    }
    
    .credentials-wrapper {
      padding: 1.5rem;
    }
    
    .supplier-item {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.75rem;
    }
    
    .bulk-actions {
      flex-direction: column;
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const sectionId = '{{ section.id }}';
  let currentSupplier = null;
  
  // Supplier endpoints from VeloConnect implementation page
  const SUPPLIERS = {
    abus: {
      name: 'ABUS',
      endpoint: 'https://partner-de.abus.com/Veloconnect'
    },
    amsler: {
      name: 'Amsler',
      endpoint: 'https://avcws.amslershop.ch/default.ashx'
    },
    chrissport: {
      name: 'ChrisSports',
      endpoint: 'http://chrissports.velocom.de/'
    },
    cube: {
      name: 'Cube Bikes',
      endpoint: 'https://Veloconnect.cube.eu/Veloconnect'
    },
    electra: {
      name: 'Electra',
      endpoint: 'https://api.trek.veloconnect.io/'
    },
    komenda: {
      name: 'Komenda',
      endpoint: 'http://komenda.velocom.de/'
    },
    magura: {
      name: 'Magura',
      endpoint: 'http://magura.velocom.de/'
    },
    maxxis: {
      name: 'Maxxis',
      endpoint: 'https://velo.maxxisstore.de/'
    },
    orbea: {
      name: 'Orbea',
      endpoint: 'https://api.orbea.veloconnect.io/'
    },
    sks: {
      name: 'SKS',
      endpoint: 'http://sks.velocom.de/veloconnect'
    },
    tourdesuisse: {
      name: 'Tour de Suisse',
      endpoint: 'http://shop.tds-rad.ch/vc/'
    }
  };
  
  // Stored credentials (in real implementation, this would be securely stored)
  let storedCredentials = {
    cube: { username: '131615', password: 'rwxEQ~8B' }
  };
  
  // Event listeners
  document.getElementById(`test-all-${sectionId}`).addEventListener('click', testAllConnections);
  document.getElementById(`export-credentials-${sectionId}`).addEventListener('click', exportCredentials);
  document.getElementById(`test-connection-${sectionId}`).addEventListener('click', testConnection);
  document.getElementById(`save-credentials-${sectionId}`).addEventListener('click', saveCredentials);
  
  // Initialize
  updateSupplierStatuses();
});

function configureSupplier(supplierId, sectionId) {
  currentSupplier = supplierId;
  const supplier = SUPPLIERS[supplierId];
  
  // Update modal content
  document.getElementById(`modal-title-${sectionId}`).textContent = `Configure ${supplier.name}`;
  document.getElementById(`modal-supplier-name-${sectionId}`).textContent = supplier.name;
  document.getElementById(`modal-endpoint-${sectionId}`).textContent = supplier.endpoint;
  
  // Load existing credentials if available
  const existing = storedCredentials[supplierId];
  if (existing) {
    document.getElementById(`modal-username-${sectionId}`).value = existing.username || '';
    document.getElementById(`modal-password-${sectionId}`).value = existing.password || '';
  } else {
    document.getElementById(`modal-username-${sectionId}`).value = '';
    document.getElementById(`modal-password-${sectionId}`).value = '';
  }
  
  // Clear test result
  document.getElementById(`test-result-${sectionId}`).style.display = 'none';
  
  // Show modal
  document.getElementById(`credentials-modal-${sectionId}`).style.display = 'flex';
}

function closeCredentialsModal(sectionId) {
  document.getElementById(`credentials-modal-${sectionId}`).style.display = 'none';
  currentSupplier = null;
}

function togglePasswordVisibility(sectionId) {
  const passwordField = document.getElementById(`modal-password-${sectionId}`);
  const checkbox = document.getElementById(`modal-show-password-${sectionId}`);
  
  passwordField.type = checkbox.checked ? 'text' : 'password';
}

function testConnection(sectionId) {
  if (!currentSupplier) return;
  
  const username = document.getElementById(`modal-username-${sectionId}`).value;
  const password = document.getElementById(`modal-password-${sectionId}`).value;
  const resultDiv = document.getElementById(`test-result-${sectionId}`);
  
  if (!username || !password) {
    showTestResult(sectionId, false, 'Please enter both username and password');
    return;
  }
  
  // Show testing state
  const testBtn = document.getElementById(`test-connection-${sectionId}`);
  const originalText = testBtn.innerHTML;
  testBtn.innerHTML = '<i class="fa fa-spinner fa-spin"></i> Testing...';
  testBtn.disabled = true;
  
  // Simulate API test (in real implementation, this would test the actual connection)
  setTimeout(() => {
    const success = Math.random() > 0.3; // 70% success rate for demo
    
    if (success) {
      showTestResult(sectionId, true, 'Connection successful! Credentials are valid.');
    } else {
      showTestResult(sectionId, false, 'Connection failed. Please check your credentials and try again.');
    }
    
    // Restore button
    testBtn.innerHTML = originalText;
    testBtn.disabled = false;
  }, 2000);
}

function showTestResult(sectionId, success, message) {
  const resultDiv = document.getElementById(`test-result-${sectionId}`);
  resultDiv.className = `test-result ${success ? 'test-success' : 'test-error'}`;
  resultDiv.textContent = message;
  resultDiv.style.display = 'block';
}

function saveCredentials(sectionId) {
  if (!currentSupplier) return;
  
  const username = document.getElementById(`modal-username-${sectionId}`).value;
  const password = document.getElementById(`modal-password-${sectionId}`).value;
  
  if (!username || !password) {
    alert('Please enter both username and password');
    return;
  }
  
  // Save credentials (in real implementation, this would be securely stored)
  storedCredentials[currentSupplier] = { username, password };
  
  // Update UI
  updateSupplierStatus(currentSupplier, 'configured');
  
  // Close modal
  closeCredentialsModal(sectionId);
  
  // Show success message
  alert(`Credentials saved for ${SUPPLIERS[currentSupplier].name}`);
}

function updateSupplierStatuses() {
  Object.keys(SUPPLIERS).forEach(supplierId => {
    const hasCredentials = storedCredentials[supplierId];
    updateSupplierStatus(supplierId, hasCredentials ? 'configured' : 'pending');
  });
}

function updateSupplierStatus(supplierId, status) {
  const statusElement = document.getElementById(`status-${supplierId}`);
  if (!statusElement) return;
  
  statusElement.className = `supplier-status status-${status}`;
  
  switch (status) {
    case 'configured':
      statusElement.textContent = 'Configured';
      break;
    case 'error':
      statusElement.textContent = 'Connection Error';
      break;
    default:
      statusElement.textContent = 'No Credentials';
  }
}

function testAllConnections() {
  const configuredSuppliers = Object.keys(storedCredentials);
  
  if (configuredSuppliers.length === 0) {
    alert('No suppliers configured. Please configure at least one supplier first.');
    return;
  }
  
  alert(`Testing connections for ${configuredSuppliers.length} configured suppliers...`);
  
  // In real implementation, this would test all configured connections
  configuredSuppliers.forEach(supplierId => {
    setTimeout(() => {
      const success = Math.random() > 0.2; // 80% success rate
      updateSupplierStatus(supplierId, success ? 'configured' : 'error');
    }, Math.random() * 2000);
  });
}

function exportCredentials() {
  const exportData = {
    suppliers: SUPPLIERS,
    configuredSuppliers: Object.keys(storedCredentials),
    exportDate: new Date().toISOString()
  };
  
  const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'veloconnect-settings.json';
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

// Global functions for onclick handlers
window.configureSupplier = configureSupplier;
window.closeCredentialsModal = closeCredentialsModal;
window.togglePasswordVisibility = togglePasswordVisibility;
</script>

{% schema %}
{
  "name": "VeloConnect Credentials",
  "settings": [
    {
      "type": "text",
      "id": "credentials_title",
      "label": "Credentials Title",
      "default": "VeloConnect Supplier Credentials"
    },
    {
      "type": "textarea",
      "id": "credentials_subtitle",
      "label": "Credentials Subtitle",
      "default": "Manage API credentials for all your VeloConnect suppliers. Configure authentication for each supplier to enable real-time inventory and product data access."
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "color_title",
      "label": "Title Color",
      "default": "#333"
    },
    {
      "type": "color",
      "id": "color_subtitle",
      "label": "Subtitle Color",
      "default": "#6c757d"
    },
    {
      "type": "header",
      "content": "Spacing"
    },
    {
      "type": "range",
      "id": "margin_top",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Margin Top",
      "default": 0
    },
    {
      "type": "range",
      "id": "margin_bottom",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Margin Bottom",
      "default": 0
    }
  ],
  "presets": [
    {
      "name": "VeloConnect Credentials",
      "category": "Tools"
    }
  ]
}
{% endschema %}
